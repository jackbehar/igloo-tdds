{
  "config": {
    "title": "Material Ui",
    "description": "My awesome app using docz",
    "menu": [],
    "version": "1.0.0",
    "repository": null,
    "native": false,
    "codeSandbox": true,
    "themeConfig": {},
    "separator": "-"
  },
  "props": [
    {
      "key": "src/AppBar/AppBar.js",
      "value": [
        {
          "description": "",
          "displayName": "AppBar",
          "methods": [],
          "actualName": "AppBar",
          "props": {
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The content of the component."
            },
            "classes": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details."
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "@ignore"
            },
            "color": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "\"inherit\"",
                    "computed": false
                  },
                  {
                    "value": "\"primary\"",
                    "computed": false
                  },
                  {
                    "value": "\"secondary\"",
                    "computed": false
                  },
                  {
                    "value": "\"default\"",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "The color of the component. It supports those theme colors that make sense for this component."
            },
            "position": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "\"fixed\"",
                    "computed": false
                  },
                  {
                    "value": "\"absolute\"",
                    "computed": false
                  },
                  {
                    "value": "\"sticky\"",
                    "computed": false
                  },
                  {
                    "value": "\"static\"",
                    "computed": false
                  },
                  {
                    "value": "\"relative\"",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "The positioning type. The behavior of the different options is described\n[in the MDN web docs](https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Positioning).\nNote: `sticky` is not universally supported and will fall back to `static` when unavailable."
            },
            "style": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "custom style object"
            }
          }
        }
      ]
    },
    {
      "key": "src/Avatar/Avatar.js",
      "value": [
        {
          "description": "",
          "displayName": "Avatar",
          "methods": [],
          "actualName": "Avatar",
          "props": {
            "backgroundShade": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "\"white\"",
                    "computed": false
                  },
                  {
                    "value": "\"red\"",
                    "computed": false
                  },
                  {
                    "value": "\"pink\"",
                    "computed": false
                  },
                  {
                    "value": "\"purple\"",
                    "computed": false
                  },
                  {
                    "value": "\"deepPurple\"",
                    "computed": false
                  },
                  {
                    "value": "\"indigo\"",
                    "computed": false
                  },
                  {
                    "value": "\"blue\"",
                    "computed": false
                  },
                  {
                    "value": "\"lightBlue\"",
                    "computed": false
                  },
                  {
                    "value": "\"cyan\"",
                    "computed": false
                  },
                  {
                    "value": "\"teal\"",
                    "computed": false
                  },
                  {
                    "value": "\"green\"",
                    "computed": false
                  },
                  {
                    "value": "\"lightGreen\"",
                    "computed": false
                  },
                  {
                    "value": "\"lime\"",
                    "computed": false
                  },
                  {
                    "value": "\"yellow\"",
                    "computed": false
                  },
                  {
                    "value": "\"amber\"",
                    "computed": false
                  },
                  {
                    "value": "\"orange\"",
                    "computed": false
                  },
                  {
                    "value": "\"deepOrange\"",
                    "computed": false
                  },
                  {
                    "value": "\"brown\"",
                    "computed": false
                  },
                  {
                    "value": "\"grey\"",
                    "computed": false
                  },
                  {
                    "value": "\"blueGrey\"",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "Color of the background of the avatar. Visible unless there's an image inside of the circle."
            },
            "backgroundHue": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "\"50\"",
                    "computed": false
                  },
                  {
                    "value": "\"100\"",
                    "computed": false
                  },
                  {
                    "value": "\"200\"",
                    "computed": false
                  },
                  {
                    "value": "\"300\"",
                    "computed": false
                  },
                  {
                    "value": "\"400\"",
                    "computed": false
                  },
                  {
                    "value": "\"500\"",
                    "computed": false
                  },
                  {
                    "value": "\"600\"",
                    "computed": false
                  },
                  {
                    "value": "\"700\"",
                    "computed": false
                  },
                  {
                    "value": "\"800\"",
                    "computed": false
                  },
                  {
                    "value": "\"900\"",
                    "computed": false
                  },
                  {
                    "value": "\"A100\"",
                    "computed": false
                  },
                  {
                    "value": "\"A200\"",
                    "computed": false
                  },
                  {
                    "value": "\"A400\"",
                    "computed": false
                  },
                  {
                    "value": "\"A700\"",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "Hue of the background of the avatar. Visible unless there's an image inside of the circle."
            },
            "contentShade": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "\"white\"",
                    "computed": false
                  },
                  {
                    "value": "\"red\"",
                    "computed": false
                  },
                  {
                    "value": "\"pink\"",
                    "computed": false
                  },
                  {
                    "value": "\"purple\"",
                    "computed": false
                  },
                  {
                    "value": "\"deepPurple\"",
                    "computed": false
                  },
                  {
                    "value": "\"indigo\"",
                    "computed": false
                  },
                  {
                    "value": "\"blue\"",
                    "computed": false
                  },
                  {
                    "value": "\"lightBlue\"",
                    "computed": false
                  },
                  {
                    "value": "\"cyan\"",
                    "computed": false
                  },
                  {
                    "value": "\"teal\"",
                    "computed": false
                  },
                  {
                    "value": "\"green\"",
                    "computed": false
                  },
                  {
                    "value": "\"lightGreen\"",
                    "computed": false
                  },
                  {
                    "value": "\"lime\"",
                    "computed": false
                  },
                  {
                    "value": "\"yellow\"",
                    "computed": false
                  },
                  {
                    "value": "\"amber\"",
                    "computed": false
                  },
                  {
                    "value": "\"orange\"",
                    "computed": false
                  },
                  {
                    "value": "\"deepOrange\"",
                    "computed": false
                  },
                  {
                    "value": "\"brown\"",
                    "computed": false
                  },
                  {
                    "value": "\"grey\"",
                    "computed": false
                  },
                  {
                    "value": "\"blueGrey\"",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "Color of the content of the avatar. Visible unless there's an image inside of the circle."
            },
            "contentHue": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "\"50\"",
                    "computed": false
                  },
                  {
                    "value": "\"100\"",
                    "computed": false
                  },
                  {
                    "value": "\"200\"",
                    "computed": false
                  },
                  {
                    "value": "\"300\"",
                    "computed": false
                  },
                  {
                    "value": "\"400\"",
                    "computed": false
                  },
                  {
                    "value": "\"500\"",
                    "computed": false
                  },
                  {
                    "value": "\"600\"",
                    "computed": false
                  },
                  {
                    "value": "\"700\"",
                    "computed": false
                  },
                  {
                    "value": "\"800\"",
                    "computed": false
                  },
                  {
                    "value": "\"900\"",
                    "computed": false
                  },
                  {
                    "value": "\"A100\"",
                    "computed": false
                  },
                  {
                    "value": "\"A200\"",
                    "computed": false
                  },
                  {
                    "value": "\"A400\"",
                    "computed": false
                  },
                  {
                    "value": "\"A700\"",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "Hue of the content of the avatar. Visible unless there's an image inside of the circle."
            },
            "alt": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "Used in combination with `src` or `srcSet` to\nprovide an alt attribute for the rendered `img` element."
            },
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "Used to render icon or text elements inside the Avatar.\n`src` and `alt` props will not be used and no `img` will\nbe rendered by default.\n\nThis can be an element, or just a string."
            },
            "classes": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Override or extend the styles applied to the component."
            },
            "imgProps": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Attributes applied to the `img` element if the component\nis used to display an image."
            },
            "sizes": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "The `sizes` attribute for the `img` element."
            },
            "src": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "The `src` attribute for the `img` element."
            },
            "srcSet": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "The `srcSet` attribute for the `img` element."
            }
          }
        }
      ]
    },
    {
      "key": "src/AvatarIconUXP/AvatarIconUXP.js",
      "value": [
        {
          "description": "",
          "displayName": "AvatarIconUXP",
          "methods": [],
          "actualName": "AvatarIconUXP",
          "props": {
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": ""
            }
          }
        }
      ]
    },
    {
      "key": "src/AvatarImageUXP/AvatarImageUXP.js",
      "value": [
        {
          "description": "",
          "displayName": "AvatarImageUXP",
          "methods": [],
          "actualName": "AvatarImageUXP",
          "props": {
            "src": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "The URL to avatar image"
            }
          }
        }
      ]
    },
    {
      "key": "src/AvatarLetterUXP/AvatarLetterUXP.js",
      "value": [
        {
          "description": "",
          "displayName": "AvatarLetterUXP",
          "methods": [],
          "actualName": "AvatarLetterUXP",
          "props": {
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "Letters to be displayed in icon. Limit two please."
            }
          }
        }
      ]
    },
    {
      "key": "src/Backdrop/Backdrop.js",
      "value": [
        {
          "description": "",
          "displayName": "Backdrop",
          "methods": [],
          "actualName": "Backdrop",
          "props": {
            "classes": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Override or extend the styles applied to the component."
            },
            "invisible": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the backdrop is invisible.\nIt can be used when rendering a popover or a custom select component."
            },
            "open": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the backdrop is open."
            },
            "transitionDuration": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "number"
                  },
                  {
                    "name": "shape",
                    "value": {
                      "enter": {
                        "name": "number",
                        "required": false
                      },
                      "exit": {
                        "name": "number",
                        "required": false
                      }
                    }
                  }
                ]
              },
              "required": false,
              "description": "The duration for the transition, in milliseconds.\nYou may specify a single timeout for all transitions, or individually with an object."
            }
          }
        }
      ]
    },
    {
      "key": "src/Banner/Banner.js",
      "value": [
        {
          "description": "",
          "displayName": "Banner",
          "methods": [],
          "actualName": "Banner",
          "props": {
            "classes": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": ""
            },
            "message": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "The main message of the banner"
            },
            "icon": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "The name of the icon from https://material.io/tools/icons."
            },
            "buttonOneLabel": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "The label of the first action button"
            },
            "buttonTwoLabel": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "Optional: The label of the second action button.\nIf no label is specified, button will not display"
            }
          }
        }
      ]
    },
    {
      "key": "src/Badge/Badge.js",
      "value": [
        {
          "description": "",
          "displayName": "Badge",
          "methods": [],
          "actualName": "Badge",
          "props": {
            "badgeContent": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The content rendered within the badge."
            },
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The badge will be added relative to this node."
            },
            "classes": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Override or extend the styles applied to the component."
            },
            "color": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "\"default\"",
                    "computed": false
                  },
                  {
                    "value": "\"primary\"",
                    "computed": false
                  },
                  {
                    "value": "\"secondary\"",
                    "computed": false
                  },
                  {
                    "value": "\"error\"",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "The color of the component. It supports those theme colors that make sense for this component."
            },
            "invisible": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the badge will be invisible."
            }
          }
        }
      ]
    },
    {
      "key": "src/BottomNavigation/BottomNavigation.js",
      "value": [
        {
          "description": "",
          "displayName": "BottomNavigation",
          "methods": [],
          "actualName": "BottomNavigation",
          "props": {
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The content of the component."
            },
            "classes": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Override or extend the styles applied to the component."
            },
            "onChange": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "Callback fired when the value changes."
            },
            "showLabels": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, all `BottomNavigationAction`s will show their labels.\nBy default, only the selected `BottomNavigationAction` will show its label."
            },
            "value": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "The value of the currently selected BottomNavigationAction."
            }
          }
        }
      ]
    },
    {
      "key": "src/BottomNavigationAction/BottomNavigationAction.js",
      "value": [
        {
          "description": "",
          "displayName": "BottomNavigationAction",
          "methods": [],
          "actualName": "BottomNavigationAction",
          "props": {
            "classes": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Override or extend the styles applied to the component."
            },
            "icon": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The icon element."
            },
            "label": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The label element."
            },
            "onChange": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": ""
            },
            "onClick": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": ""
            },
            "selected": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": ""
            },
            "showLabel": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the `BottomNavigationAction` will show its label.\nBy default, only the selected `BottomNavigationAction`\ninside `BottomNavigation` will show its label."
            },
            "value": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": ""
            }
          }
        }
      ]
    },
    {
      "key": "src/Box/Box.js",
      "value": [
        {
          "description": "",
          "displayName": "Box",
          "methods": [],
          "actualName": "Box",
          "props": {
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The content of the box."
            },
            "paddingTop": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "0",
                    "computed": false
                  },
                  {
                    "value": "1",
                    "computed": false
                  },
                  {
                    "value": "2",
                    "computed": false
                  },
                  {
                    "value": "3",
                    "computed": false
                  },
                  {
                    "value": "4",
                    "computed": false
                  },
                  {
                    "value": "5",
                    "computed": false
                  },
                  {
                    "value": "6",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "Top Padding.\nEach unit equals 8dp. Example:\n0=px, 1=8px, 2=16px, 3=24px ..."
            },
            "paddingRight": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "0",
                    "computed": false
                  },
                  {
                    "value": "1",
                    "computed": false
                  },
                  {
                    "value": "2",
                    "computed": false
                  },
                  {
                    "value": "3",
                    "computed": false
                  },
                  {
                    "value": "4",
                    "computed": false
                  },
                  {
                    "value": "5",
                    "computed": false
                  },
                  {
                    "value": "6",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "Right Padding.\nEach unit equals 8dp. Example:\n0=px, 1=8px, 2=16px, 3=24px ..."
            },
            "paddingBottom": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "0",
                    "computed": false
                  },
                  {
                    "value": "1",
                    "computed": false
                  },
                  {
                    "value": "2",
                    "computed": false
                  },
                  {
                    "value": "3",
                    "computed": false
                  },
                  {
                    "value": "4",
                    "computed": false
                  },
                  {
                    "value": "5",
                    "computed": false
                  },
                  {
                    "value": "6",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "Bottom Padding.\nEach unit equals 8dp. Example:\n0=px, 1=8px, 2=16px, 3=24px ..."
            },
            "paddingLeft": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "0",
                    "computed": false
                  },
                  {
                    "value": "1",
                    "computed": false
                  },
                  {
                    "value": "2",
                    "computed": false
                  },
                  {
                    "value": "3",
                    "computed": false
                  },
                  {
                    "value": "4",
                    "computed": false
                  },
                  {
                    "value": "5",
                    "computed": false
                  },
                  {
                    "value": "6",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "Left Padding.\nEach unit equals 8dp. Example:\n0=px, 1=8px, 2=16px, 3=24px ..."
            }
          }
        }
      ]
    },
    {
      "key": "src/Button/Button.js",
      "value": [
        {
          "description": "",
          "displayName": "Button",
          "methods": [],
          "actualName": "Button",
          "props": {
            "onClick": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": ""
            },
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The content of the button."
            },
            "classes": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Override or extend the styles applied to the component."
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": ""
            },
            "color": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "\"default\"",
                    "computed": false
                  },
                  {
                    "value": "\"inherit\"",
                    "computed": false
                  },
                  {
                    "value": "\"primary\"",
                    "computed": false
                  },
                  {
                    "value": "\"secondary\"",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "The color of the component. It supports those theme colors that make sense for this component."
            },
            "disabled": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the button will be disabled."
            },
            "disableFocusRipple": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the  keyboard focus ripple will be disabled.\n`disableRipple` must also be true."
            },
            "disableRipple": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the ripple effect will be disabled."
            },
            "focusVisibleClassName": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": ""
            },
            "fullWidth": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the button will take up the full width of its container."
            },
            "href": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "The URL to link to when the button is clicked.\nIf defined, an `a` element will be used as the root node."
            },
            "mini": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, and `variant` is `'fab'`, will use mini floating action button styling."
            },
            "size": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "\"small\"",
                    "computed": false
                  },
                  {
                    "value": "\"medium\"",
                    "computed": false
                  },
                  {
                    "value": "\"large\"",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "The size of the button.\n`small` is equivalent to the dense button styling."
            },
            "type": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": ""
            },
            "variant": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "\"text\"",
                    "computed": false
                  },
                  {
                    "value": "\"outlined\"",
                    "computed": false
                  },
                  {
                    "value": "\"contained\"",
                    "computed": false
                  },
                  {
                    "value": "\"fab\"",
                    "computed": false
                  },
                  {
                    "value": "\"extendedFab\"",
                    "computed": false
                  },
                  {
                    "value": "\"flat\"",
                    "computed": false
                  },
                  {
                    "value": "\"raised\"",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "The variant to use.\n__WARNING__: `flat` and `raised` are deprecated.\nInstead use `text` and `contained` respectively.\n`fab` and `extendedFab` are deprecated.\nInstead use `<Fab>` and `<Fab variant=\"extended\">`"
            }
          }
        }
      ]
    },
    {
      "key": "src/ButtonStyled/ButtonStyled.js",
      "value": [
        {
          "description": "",
          "displayName": "ButtonStyled",
          "methods": [],
          "actualName": "ButtonStyled",
          "props": {
            "children": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "",
              "defaultValue": {
                "value": "\"Hello World\"",
                "computed": false
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/ButtonUXP/ButtonUXP.js",
      "value": [
        {
          "description": "",
          "displayName": "ButtonUXP",
          "methods": [],
          "actualName": "ButtonUXP",
          "props": {
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The label or content of the button."
            },
            "variant": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "\"text\"",
                    "computed": false
                  },
                  {
                    "value": "\"outlined\"",
                    "computed": false
                  },
                  {
                    "value": "\"contained\"",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "The type of button."
            },
            "color": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "\"primary\"",
                    "computed": false
                  },
                  {
                    "value": "\"secondary\"",
                    "computed": false
                  },
                  {
                    "value": "\"inherit\"",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "The color of the button."
            },
            "size": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "\"small\"",
                    "computed": false
                  },
                  {
                    "value": "\"medium\"",
                    "computed": false
                  },
                  {
                    "value": "\"large\"",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "The size of the button."
            },
            "icon": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "If set, icon will display.\nUse the name of the icon from https://material.io/tools/icons."
            },
            "fullWidth": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the button will take up the full width of its container."
            },
            "disabled": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the button will be disabled."
            },
            "onClick": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": ""
            }
          }
        }
      ]
    },
    {
      "key": "src/Card/Card.js",
      "value": [
        {
          "description": "",
          "displayName": "Card",
          "methods": [],
          "actualName": "Card",
          "props": {
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": ""
            },
            "classes": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Override or extend the styles applied to the component."
            },
            "raised": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the card will use raised styling."
            }
          }
        }
      ]
    },
    {
      "key": "src/CardActions/CardActions.js",
      "value": [
        {
          "description": "",
          "displayName": "CardActions",
          "methods": [],
          "actualName": "CardActions",
          "props": {
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The content of the component."
            },
            "classes": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Override or extend the styles applied to the component."
            },
            "disableActionSpacing": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the card actions do not have additional margin."
            }
          }
        }
      ]
    },
    {
      "key": "src/CardContent/CardContent.js",
      "value": [
        {
          "description": "",
          "displayName": "CardContent",
          "methods": [],
          "actualName": "CardContent",
          "props": {
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": ""
            },
            "classes": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Override or extend the styles applied to the component."
            }
          }
        }
      ]
    },
    {
      "key": "src/CardHeader/CardHeader.js",
      "value": [
        {
          "description": "",
          "displayName": "CardHeader",
          "methods": [],
          "actualName": "CardHeader",
          "props": {
            "action": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The action to display in the card header."
            },
            "avatar": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The Avatar for the Card Header."
            },
            "classes": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Override or extend the styles applied to the component."
            },
            "disableTypography": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the children won't be wrapped by a Typography component.\nThis can be useful to render an alternative Typography variant by wrapping\nthe `title` text, and optional `subheader` text\nwith the Typography component."
            },
            "subheader": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The content of the component."
            },
            "subheaderTypographyProps": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "These props will be forwarded to the subheader\n(as long as disableTypography is not `true`)."
            },
            "title": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The content of the Card Title."
            },
            "titleTypographyProps": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "These props will be forwarded to the title\n(as long as disableTypography is not `true`)."
            }
          }
        }
      ]
    },
    {
      "key": "src/CardMedia/CardMedia.js",
      "value": [
        {
          "description": "",
          "displayName": "CardMedia",
          "methods": [],
          "actualName": "CardMedia",
          "props": {
            "classes": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Override or extend the styles applied to the component."
            },
            "component": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": ""
            },
            "image": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "Image to be displayed as a background image.\nEither `image` or `src` prop must be specified.\nNote that caller must specify height otherwise the image will not be visible."
            },
            "src": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "An alias for `image` property.\nAvailable only with media components.\nMedia components: `video`, `audio`, `picture`, `iframe`, `img`."
            },
            "style": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": ""
            }
          }
        }
      ]
    },
    {
      "key": "src/Checkbox/Checkbox.js",
      "value": [
        {
          "description": "",
          "displayName": "Checkbox",
          "methods": [],
          "actualName": "Checkbox",
          "props": {
            "checked": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the component is checked."
            },
            "checkedIcon": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The icon to display when the component is checked."
            },
            "classes": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Override or extend the styles applied to the component."
            },
            "color": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "\"primary\"",
                    "computed": false
                  },
                  {
                    "value": "\"secondary\"",
                    "computed": false
                  },
                  {
                    "value": "\"default\"",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "The color of the component. It supports those theme colors that make sense for this component."
            },
            "disabled": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the switch will be disabled."
            },
            "disableRipple": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the ripple effect will be disabled."
            },
            "icon": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The icon to display when the component is unchecked."
            },
            "id": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "The id of the `input` element."
            },
            "indeterminate": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the component appears indeterminate.\nThis does not set the native input element to indeterminate due\nto inconsistent behavior across browsers.\nHowever, we set a `data-indeterminate` attribute on the input."
            },
            "indeterminateIcon": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The icon to display when the component is indeterminate."
            },
            "inputProps": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Properties applied to the `input` element."
            },
            "inputRef": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "func"
                  },
                  {
                    "name": "object"
                  }
                ]
              },
              "required": false,
              "description": "Use that property to pass a ref callback to the native input component."
            },
            "onChange": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "Callback fired when the state is changed."
            },
            "type": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "The input component property `type`."
            },
            "value": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "The value of the component."
            }
          }
        }
      ]
    },
    {
      "key": "src/Chip/Chip.js",
      "value": [
        {
          "description": "",
          "displayName": "Chip",
          "methods": [],
          "actualName": "Chip",
          "props": {
            "avatar": {
              "type": {
                "name": "element"
              },
              "required": false,
              "description": "Avatar element."
            },
            "classes": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Override or extend the styles applied to the component."
            },
            "clickable": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If true, the chip will appear clickable, and will raise when pressed,\neven if the onClick property is not defined.\nIf false, the chip will not be clickable, even if onClick property is defined.\nThis can be used, for example,\nalong with the component property to indicate an anchor Chip is clickable."
            },
            "color": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "\"default\"",
                    "computed": false
                  },
                  {
                    "value": "\"primary\"",
                    "computed": false
                  },
                  {
                    "value": "\"secondary\"",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "The color of the component. It supports those theme colors that make sense for this component."
            },
            "component": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "The component used for the root node.\nEither a string to use a DOM element or a component."
            },
            "deleteIcon": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "Override the default delete icon element. Shown only if `onDelete` is set."
            },
            "icon": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "Icon element."
            },
            "label": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The content of the label."
            },
            "onClick": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": ""
            },
            "onDelete": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "Callback function fired when the delete icon is clicked.\nIf set, the delete icon will be shown."
            },
            "onKeyDown": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": ""
            },
            "onKeyUp": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": ""
            },
            "tabIndex": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "number"
                  },
                  {
                    "name": "string"
                  }
                ]
              },
              "required": false,
              "description": ""
            },
            "variant": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "\"default\"",
                    "computed": false
                  },
                  {
                    "value": "\"outlined\"",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "The variant to use."
            }
          }
        }
      ]
    },
    {
      "key": "src/CircularProgress/CircularProgress.js",
      "value": [
        {
          "description": "",
          "displayName": "CircularProgress",
          "methods": [],
          "actualName": "CircularProgress",
          "props": {
            "classes": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details."
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "@ignore"
            },
            "color": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "'primary'",
                    "computed": false
                  },
                  {
                    "value": "'secondary'",
                    "computed": false
                  },
                  {
                    "value": "'inherit'",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "The color of the component. It supports those theme colors that make sense for this component."
            },
            "disableShrink": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the shrink animation is disabled.\nThis only works if variant is `indeterminate`."
            },
            "size": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "number"
                  },
                  {
                    "name": "string"
                  }
                ]
              },
              "required": false,
              "description": "The size of the circle."
            },
            "style": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "@ignore"
            },
            "thickness": {
              "type": {
                "name": "number"
              },
              "required": false,
              "description": "The thickness of the circle."
            },
            "value": {
              "type": {
                "name": "number"
              },
              "required": false,
              "description": "The value of the progress indicator for the determinate and static variants.\nValue between 0 and 100."
            },
            "variant": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "'determinate'",
                    "computed": false
                  },
                  {
                    "value": "'indeterminate'",
                    "computed": false
                  },
                  {
                    "value": "'static'",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "The variant to use.\nUse indeterminate when there is no progress value."
            }
          }
        }
      ]
    },
    {
      "key": "src/Collapse/Collapse.js",
      "value": [
        {
          "description": "",
          "displayName": "Collapse",
          "methods": [],
          "actualName": "Collapse",
          "props": {
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The content node to be collapsed."
            },
            "classes": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details."
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "@ignore"
            },
            "collapsedHeight": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "The height of the container when collapsed."
            },
            "component": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The component used for the root node.\nEither a string to use a DOM element or a component."
            },
            "in": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the component will transition in."
            },
            "onEnter": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "@ignore"
            },
            "onEntered": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "@ignore"
            },
            "onEntering": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "@ignore"
            },
            "onExit": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "@ignore"
            },
            "onExiting": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "@ignore"
            },
            "style": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "@ignore"
            },
            "theme": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "@ignore"
            },
            "timeout": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "number"
                  },
                  {
                    "name": "shape",
                    "value": {
                      "enter": {
                        "name": "number",
                        "required": false
                      },
                      "exit": {
                        "name": "number",
                        "required": false
                      }
                    }
                  },
                  {
                    "name": "enum",
                    "value": [
                      {
                        "value": "'auto'",
                        "computed": false
                      }
                    ]
                  }
                ]
              },
              "required": false,
              "description": "The duration for the transition, in milliseconds.\nYou may specify a single timeout for all transitions, or individually with an object.\n\nSet to 'auto' to automatically calculate transition time based on height."
            }
          }
        }
      ]
    },
    {
      "key": "src/ComponentDemoUXP/ComponentDemoUXP.js",
      "value": [
        {
          "description": "",
          "displayName": "ComponentDemoUXP",
          "methods": [
            {
              "name": "handleDrawerOpen",
              "docblock": null,
              "modifiers": [],
              "params": [],
              "returns": null
            },
            {
              "name": "handleDrawerClose",
              "docblock": null,
              "modifiers": [],
              "params": [],
              "returns": null
            },
            {
              "name": "handleNestedList",
              "docblock": null,
              "modifiers": [],
              "params": [],
              "returns": null
            },
            {
              "name": "handleListItemClick",
              "docblock": null,
              "modifiers": [],
              "params": [
                {
                  "name": "event",
                  "type": null
                },
                {
                  "name": "index",
                  "type": null
                }
              ],
              "returns": null
            }
          ],
          "actualName": "ComponentDemoUXP",
          "props": {
            "pageTitle": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": ""
            },
            "pageId": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": ""
            },
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": ""
            }
          }
        }
      ]
    },
    {
      "key": "src/ComponentInspectorUXP/ComponentInspectorUXP.js",
      "value": [
        {
          "description": "",
          "displayName": "ComponentInspector",
          "methods": [
            {
              "name": "handleChange",
              "docblock": null,
              "modifiers": [],
              "params": [
                {
                  "name": "e",
                  "type": null
                },
                {
                  "name": "value",
                  "type": null
                }
              ],
              "returns": null
            },
            {
              "name": "handleCodeChange",
              "docblock": null,
              "modifiers": [],
              "params": [
                {
                  "name": "e",
                  "type": null
                },
                {
                  "name": "value",
                  "type": null
                }
              ],
              "returns": null
            },
            {
              "name": "handleTabChange",
              "docblock": null,
              "modifiers": [],
              "params": [
                {
                  "name": "event",
                  "type": null
                },
                {
                  "name": "value",
                  "type": null
                }
              ],
              "returns": null
            }
          ],
          "actualName": "ComponentInspector",
          "props": {
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": ""
            },
            "title": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": ""
            },
            "responsive": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "",
              "defaultValue": {
                "value": "true",
                "computed": false
              }
            },
            "classes": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": ""
            },
            "jsxCode": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "",
              "defaultValue": {
                "value": "\"Coming soon...\"",
                "computed": false
              }
            },
            "cssHtmlCode": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "",
              "defaultValue": {
                "value": "\"Coming soon...\"",
                "computed": false
              }
            },
            "propsCode": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "",
              "defaultValue": {
                "value": "\"Coming soon...\"",
                "computed": false
              }
            },
            "componentName": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": ""
            }
          }
        }
      ]
    },
    {
      "key": "src/CssBaseline/CssBaseline.js",
      "value": [
        {
          "description": "",
          "displayName": "CssBaseline",
          "methods": [],
          "actualName": "CssBaseline",
          "props": {
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "You can wrap a node."
            },
            "classes": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "@ignore"
            }
          }
        }
      ]
    },
    {
      "key": "src/DemoFrame/DemoFrame.js",
      "value": [
        {
          "description": "",
          "displayName": "DemoFrame",
          "methods": [
            {
              "name": "handleRef",
              "docblock": null,
              "modifiers": [],
              "params": [
                {
                  "name": "ref",
                  "type": null
                }
              ],
              "returns": null
            },
            {
              "name": "onContentDidMount",
              "docblock": null,
              "modifiers": [],
              "params": [],
              "returns": null
            },
            {
              "name": "onContentDidUpdate",
              "docblock": null,
              "modifiers": [],
              "params": [],
              "returns": null
            }
          ],
          "actualName": "DemoFrame",
          "props": {
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": ""
            },
            "classes": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": ""
            },
            "theme": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": ""
            }
          }
        }
      ]
    },
    {
      "key": "src/DemoSandboxed/BreakpointUp.js",
      "value": [
        {
          "description": "",
          "methods": []
        }
      ]
    },
    {
      "key": "src/DemoSandboxed/DemoErrorBoundary.js",
      "value": [
        {
          "description": "",
          "displayName": "DemoErrorBoundary",
          "methods": [],
          "actualName": "DemoErrorBoundary",
          "props": {
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": ""
            }
          }
        }
      ]
    },
    {
      "key": "src/DemoSandboxed/DemoSandboxed.js",
      "value": [
        {
          "description": "Isolates the demo component as best as possible. Additional props are spread\nto an `iframe` if `iframe={true}`.",
          "displayName": "DemoSandboxed",
          "methods": [],
          "actualName": "DemoSandboxed",
          "props": {
            "component": {
              "type": {
                "name": "elementType"
              },
              "required": false,
              "description": ""
            },
            "iframe": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": ""
            },
            "name": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": ""
            }
          }
        }
      ]
    },
    {
      "key": "src/DeviceViewer/DeviceViewer.js",
      "value": [
        {
          "description": "",
          "displayName": "DeviceViewer",
          "methods": [
            {
              "name": "handleChangeSelect",
              "docblock": null,
              "modifiers": [],
              "params": [
                {
                  "name": "event",
                  "type": null
                }
              ],
              "returns": null
            },
            {
              "name": "handleChange",
              "docblock": null,
              "modifiers": [],
              "params": [
                {
                  "name": "e",
                  "type": null
                }
              ],
              "returns": null
            }
          ],
          "actualName": "DeviceViewer",
          "props": {
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": ""
            },
            "responsive": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "",
              "defaultValue": {
                "value": "true",
                "computed": false
              }
            },
            "defaultView": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "\"desktop\"",
                    "computed": false
                  },
                  {
                    "value": "\"tablet\"",
                    "computed": false
                  },
                  {
                    "value": "\"mobile\"",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "",
              "defaultValue": {
                "value": "\"desktop\"",
                "computed": false
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/DialogActions/DialogActions.js",
      "value": [
        {
          "description": "",
          "displayName": "DialogActions",
          "methods": [],
          "actualName": "DialogActions",
          "props": {
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The content of the component."
            },
            "disableActionSpacing": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If true, the dialog actions do not have additional margin."
            },
            "classes": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Override or extend the styles applied to the component. See CSS API below for more details."
            }
          }
        }
      ]
    },
    {
      "key": "src/DialogContent/DialogContent.js",
      "value": [
        {
          "description": "",
          "displayName": "DialogContent",
          "methods": [],
          "actualName": "DialogContent",
          "props": {
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The content of the component."
            }
          }
        }
      ]
    },
    {
      "key": "src/DialogContentText/DialogContentText.js",
      "value": [
        {
          "description": "",
          "displayName": "DialogContentText",
          "methods": [],
          "actualName": "DialogContentText",
          "props": {
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The Dialog Content Text"
            }
          }
        }
      ]
    },
    {
      "key": "src/DialogSimpleUXP/DialogSimpleUXP.js",
      "value": [
        {
          "description": "",
          "displayName": "DialogSimple",
          "methods": [],
          "actualName": "DialogSimple",
          "props": {
            "open": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the Dialog is open."
            },
            "fullScreen": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the dialog will be full-screen"
            },
            "disableBackdropClick": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, clicking the backdrop will not fire the `onClose` callback."
            },
            "fullWidth": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the dialog stretches to `maxWidth`."
            },
            "maxWidth": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "\"xs\"",
                    "computed": false
                  },
                  {
                    "value": "\"sm\"",
                    "computed": false
                  },
                  {
                    "value": "\"md\"",
                    "computed": false
                  },
                  {
                    "value": "\"lg\"",
                    "computed": false
                  },
                  {
                    "value": "\"xl\"",
                    "computed": false
                  },
                  {
                    "value": "false",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "Determine the max width of the dialog.\nThe dialog width grows with the size of the screen, this property is useful\non the desktop where you might need some coherent different width size across your\napplication. Set to `false` to disable `maxWidth`."
            },
            "onEnter": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "Callback fired before the dialog enters."
            },
            "onExit": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "Callback fired before the dialog exits."
            },
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": ""
            }
          }
        }
      ]
    },
    {
      "key": "src/DialogTitle/DialogTitle.js",
      "value": [
        {
          "description": "",
          "displayName": "DialogTitle",
          "methods": [],
          "actualName": "DialogTitle",
          "props": {
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The text of the Dialog Title."
            }
          }
        }
      ]
    },
    {
      "key": "src/DialogUXP/DialogUXP.js",
      "value": [
        {
          "description": "",
          "displayName": "DialogUXP",
          "methods": [
            {
              "name": "handleClickOpen",
              "docblock": null,
              "modifiers": [],
              "params": [],
              "returns": null
            },
            {
              "name": "handleClose",
              "docblock": null,
              "modifiers": [],
              "params": [],
              "returns": null
            }
          ],
          "actualName": "DialogUXP",
          "props": {
            "open": {
              "type": {
                "name": "bool"
              },
              "required": true,
              "description": "If `true`, the Dialog is open."
            },
            "height": {
              "type": {
                "name": "number"
              },
              "required": false,
              "description": "Height of the dialog. This should equal the height of UXP canvas"
            },
            "fullScreen": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the dialog will be full-screen"
            },
            "disableBackdropClick": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, clicking the backdrop will not fire the `onClose` callback."
            },
            "fullWidth": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the dialog stretches to `maxWidth`."
            },
            "maxWidth": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "\"xs\"",
                    "computed": false
                  },
                  {
                    "value": "\"sm\"",
                    "computed": false
                  },
                  {
                    "value": "\"md\"",
                    "computed": false
                  },
                  {
                    "value": "\"lg\"",
                    "computed": false
                  },
                  {
                    "value": "\"xl\"",
                    "computed": false
                  },
                  {
                    "value": "false",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "Determine the max width of the dialog.\nThe dialog width grows with the size of the screen, this property is useful\non the desktop where you might need some coherent different width size across your\napplication. Set to `false` to disable `maxWidth`."
            },
            "onEnter": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "Callback fired before the dialog enters."
            },
            "onExit": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "Callback fired before the dialog exits."
            },
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": ""
            }
          }
        }
      ]
    },
    {
      "key": "src/DividerUXP/DividerUXP.js",
      "value": [
        {
          "description": "",
          "displayName": "Divider",
          "methods": [],
          "actualName": "Divider",
          "props": {
            "variant": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "\"fullWidth\"",
                    "computed": false
                  },
                  {
                    "value": "\"inset\"",
                    "computed": false
                  },
                  {
                    "value": "\"middle\"",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "The variant to use."
            },
            "light": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If true, the divider will have a lighter color."
            },
            "absolute": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "Absolutely position the element."
            },
            "component": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "The component used for the root node.\nEither a string to use a DOM element or a component."
            },
            "classes": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Override or extend the styles applied to the component."
            }
          }
        }
      ]
    },
    {
      "key": "src/Drawer/Drawer.js",
      "value": [
        {
          "description": "",
          "displayName": "Drawer",
          "methods": [],
          "actualName": "Drawer",
          "props": {
            "anchor": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "'left'",
                    "computed": false
                  },
                  {
                    "value": "'top'",
                    "computed": false
                  },
                  {
                    "value": "'right'",
                    "computed": false
                  },
                  {
                    "value": "'bottom'",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "Side from which the drawer will appear."
            },
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The contents of the drawer."
            },
            "classes": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details."
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "@ignore"
            },
            "elevation": {
              "type": {
                "name": "number"
              },
              "required": false,
              "description": "The elevation of the drawer."
            },
            "ModalProps": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Properties applied to the [`Modal`](/api/modal/) element."
            },
            "onClose": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "Callback fired when the component requests to be closed.\n\n@param {object} event The event source of the callback"
            },
            "open": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the drawer is open."
            },
            "PaperProps": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Properties applied to the [`Paper`](/api/paper/) element."
            },
            "SlideProps": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Properties applied to the [`Slide`](/api/slide/) element."
            },
            "theme": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "@ignore"
            },
            "transitionDuration": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "number"
                  },
                  {
                    "name": "shape",
                    "value": {
                      "enter": {
                        "name": "number",
                        "required": false
                      },
                      "exit": {
                        "name": "number",
                        "required": false
                      }
                    }
                  }
                ]
              },
              "required": false,
              "description": "The duration for the transition, in milliseconds.\nYou may specify a single timeout for all transitions, or individually with an object."
            },
            "variant": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "'permanent'",
                    "computed": false
                  },
                  {
                    "value": "'persistent'",
                    "computed": false
                  },
                  {
                    "value": "'temporary'",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "The variant to use."
            }
          }
        }
      ]
    },
    {
      "key": "src/DrawerModalUXP/DrawerModalUXP.js",
      "value": [
        {
          "description": "",
          "displayName": "DrawerModalUXP",
          "methods": [
            {
              "name": "toggleDrawer",
              "docblock": null,
              "modifiers": [],
              "params": [],
              "returns": null
            }
          ],
          "actualName": "DrawerModalUXP",
          "props": {
            "open": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "Show/Hide the drawer."
            },
            "variant": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "\"permanent\"",
                    "computed": false
                  },
                  {
                    "value": "\"persistent\"",
                    "computed": false
                  },
                  {
                    "value": "\"temporary\"",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "The variant to use."
            },
            "anchor": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "\"left\"",
                    "computed": false
                  },
                  {
                    "value": "\"top\"",
                    "computed": false
                  },
                  {
                    "value": "\"right\"",
                    "computed": false
                  },
                  {
                    "value": "\"bottom\"",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "Side from which the drawer will appear."
            },
            "minHeight": {
              "type": {
                "name": "number"
              },
              "required": false,
              "description": "Needed to display in UXP editor if variant is `permanent` or `persistent`"
            },
            "onClose": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "Callback fired when the component requests to be closed."
            },
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The contents of the drawer."
            }
          }
        }
      ]
    },
    {
      "key": "src/ExpansionPanel/ExpansionPanel.js",
      "value": [
        {
          "description": "",
          "displayName": "ExpansionPanel",
          "methods": [],
          "actualName": "ExpansionPanel",
          "props": {
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The content of the expansion panel."
            },
            "classes": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details."
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "@ignore"
            },
            "CollapseProps": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Properties applied to the [`Collapse`](/api/collapse/) element."
            },
            "defaultExpanded": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, expands the panel by default."
            },
            "disabled": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the panel will be displayed in a disabled state."
            },
            "expanded": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, expands the panel, otherwise collapse it.\nSetting this prop enables control over the panel."
            },
            "onChange": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "Callback fired when the expand/collapse state is changed.\n\n@param {object} event The event source of the callback\n@param {boolean} expanded The `expanded` state of the panel"
            }
          }
        }
      ]
    },
    {
      "key": "src/ExpansionPanelActions/ExpansionPanelActions.js",
      "value": [
        {
          "description": "",
          "displayName": "ExpansionPanelActions",
          "methods": [],
          "actualName": "ExpansionPanelActions",
          "props": {
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The content of the component."
            },
            "classes": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details."
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "@ignore"
            }
          }
        }
      ]
    },
    {
      "key": "src/ExpansionPanelDetails/ExpansionPanelDetails.js",
      "value": [
        {
          "description": "",
          "displayName": "ExpansionPanelDetails",
          "methods": [],
          "actualName": "ExpansionPanelDetails",
          "props": {
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The content of the expansion panel details."
            },
            "classes": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details."
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "@ignore"
            }
          }
        }
      ]
    },
    {
      "key": "src/ExpansionPanelSummary/ExpansionPanelSummary.js",
      "value": [
        {
          "description": "",
          "displayName": "ExpansionPanelSummary",
          "methods": [],
          "actualName": "ExpansionPanelSummary",
          "props": {
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The content of the expansion panel summary."
            },
            "classes": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details."
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "@ignore"
            },
            "disabled": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "@ignore\nIf `true`, the summary will be displayed in a disabled state."
            },
            "expanded": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "@ignore\nIf `true`, expands the summary, otherwise collapse it."
            },
            "expandIcon": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The icon to display as the expand indicator."
            },
            "IconButtonProps": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Properties applied to the `TouchRipple` element wrapping the expand icon."
            },
            "onChange": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "@ignore"
            },
            "onClick": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "@ignore"
            }
          }
        }
      ]
    },
    {
      "key": "src/Fab/Fab.js",
      "value": [
        {
          "description": "",
          "displayName": "Fab",
          "methods": [],
          "actualName": "Fab",
          "props": {
            "onClick": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "OnClick event"
            },
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The content of the button."
            },
            "label": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "Label of the button."
            },
            "classes": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details."
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "@ignore"
            },
            "color": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "'default'",
                    "computed": false
                  },
                  {
                    "value": "'inherit'",
                    "computed": false
                  },
                  {
                    "value": "'primary'",
                    "computed": false
                  },
                  {
                    "value": "'secondary'",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "The color of the component. It supports those theme colors that make sense for this component."
            },
            "component": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "The component used for the root node.\nEither a string to use a DOM element or a component."
            },
            "disabled": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the button will be disabled."
            },
            "disableFocusRipple": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the  keyboard focus ripple will be disabled.\n`disableRipple` must also be true."
            },
            "disableRipple": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the ripple effect will be disabled."
            },
            "focusVisibleClassName": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "@ignore"
            },
            "href": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "The URL to link to when the button is clicked.\nIf defined, an `a` element will be used as the root node."
            },
            "size": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "'small'",
                    "computed": false
                  },
                  {
                    "value": "'medium'",
                    "computed": false
                  },
                  {
                    "value": "'large'",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "The size of the button.\n`small` is equivalent to the dense button styling."
            },
            "type": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "@ignore"
            },
            "variant": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "'round'",
                    "computed": false
                  },
                  {
                    "value": "'extended'",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "The variant to use."
            }
          }
        }
      ]
    },
    {
      "key": "src/FabExtendedUXP/FabExtendedUXP.js",
      "value": [
        {
          "description": "",
          "displayName": "FabExtendedUXP",
          "methods": [],
          "actualName": "FabExtendedUXP",
          "props": {
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The content of the button."
            },
            "label": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "Label of the button."
            },
            "color": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "'default'",
                    "computed": false
                  },
                  {
                    "value": "'inherit'",
                    "computed": false
                  },
                  {
                    "value": "'primary'",
                    "computed": false
                  },
                  {
                    "value": "'secondary'",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "The color of the component. It supports those theme colors that make sense for this component."
            },
            "size": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "'small'",
                    "computed": false
                  },
                  {
                    "value": "'medium'",
                    "computed": false
                  },
                  {
                    "value": "'large'",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "The size of the button.\n`small` is equivalent to the dense button styling."
            },
            "disabled": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the button will be disabled."
            },
            "onClick": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "OnClick event"
            }
          }
        }
      ]
    },
    {
      "key": "src/FabRoundUXP/FabRoundUXP.js",
      "value": [
        {
          "description": "",
          "displayName": "FabRoundUXP",
          "methods": [],
          "actualName": "FabRoundUXP",
          "props": {
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The content of the button."
            },
            "color": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "'default'",
                    "computed": false
                  },
                  {
                    "value": "'inherit'",
                    "computed": false
                  },
                  {
                    "value": "'primary'",
                    "computed": false
                  },
                  {
                    "value": "'secondary'",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "The color of the component. It supports those theme colors that make sense for this component."
            },
            "size": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "'small'",
                    "computed": false
                  },
                  {
                    "value": "'medium'",
                    "computed": false
                  },
                  {
                    "value": "'large'",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "The size of the button.\n`small` is equivalent to the dense button styling."
            },
            "disabled": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the button will be disabled."
            },
            "onClick": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "OnClick event"
            }
          }
        }
      ]
    },
    {
      "key": "src/FilledInput/FilledInput.js",
      "value": [
        {
          "description": "",
          "displayName": "FilledInput",
          "methods": [],
          "actualName": "FilledInput",
          "props": {
            "autoComplete": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "This property helps users to fill forms faster, especially on mobile devices.\nThe name can be confusing, as it's more like an autofill.\nYou can learn more about it here:\nhttps://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill"
            },
            "autoFocus": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the input will be focused during the first mount."
            },
            "classes": {
              "type": {
                "name": "object"
              },
              "required": true,
              "description": "Override or extend the styles applied to the component."
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "The CSS class name of the wrapper element."
            },
            "defaultValue": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "number"
                  },
                  {
                    "name": "bool"
                  },
                  {
                    "name": "object"
                  },
                  {
                    "name": "arrayOf",
                    "value": {
                      "name": "union",
                      "value": [
                        {
                          "name": "string"
                        },
                        {
                          "name": "number"
                        },
                        {
                          "name": "bool"
                        },
                        {
                          "name": "object"
                        }
                      ]
                    }
                  }
                ]
              },
              "required": false,
              "description": "The default input value, useful when not controlling the component."
            },
            "disabled": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the input will be disabled."
            },
            "endAdornment": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "End `InputAdornment` for this component."
            },
            "error": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the input will indicate an error. This is normally obtained via context from\nFormControl."
            },
            "fullWidth": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the input will take up the full width of its container."
            },
            "id": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "The id of the `input` element."
            },
            "inputComponent": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The component used for the native input.\nEither a string to use a DOM element or a component."
            },
            "inputProps": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Attributes applied to the `input` element."
            },
            "inputRef": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "func"
                  },
                  {
                    "name": "object"
                  }
                ]
              },
              "required": false,
              "description": "Use that property to pass a ref callback to the native input component."
            },
            "labelWidth": {
              "type": {
                "name": "number"
              },
              "required": true,
              "description": "The width of the legend."
            },
            "margin": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "'dense'",
                    "computed": false
                  },
                  {
                    "value": "'none'",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "If `dense`, will adjust vertical spacing. This is normally obtained via context from\nFormControl."
            },
            "multiline": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, a textarea element will be rendered."
            },
            "name": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "Name attribute of the `input` element."
            },
            "notched": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the outline is notched to accommodate the label."
            },
            "onChange": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "Callback fired when the value is changed.\n\n@param {object} event The event source of the callback.\nYou can pull out the new value by accessing `event.target.value`."
            },
            "placeholder": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "The short hint displayed in the input before the user enters a value."
            },
            "readOnly": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "It prevents the user from changing the value of the field\n(not from interacting with the field)."
            },
            "required": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the input will be required."
            },
            "rows": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "number"
                  }
                ]
              },
              "required": false,
              "description": "Number of rows to display when multiline option is set to true."
            },
            "rowsMax": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "number"
                  }
                ]
              },
              "required": false,
              "description": "Maximum number of rows to display when multiline option is set to true."
            },
            "startAdornment": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "Start `InputAdornment` for this component."
            },
            "type": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "Type of the input element. It should be a valid HTML5 input type."
            },
            "value": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "number"
                  },
                  {
                    "name": "bool"
                  },
                  {
                    "name": "object"
                  },
                  {
                    "name": "arrayOf",
                    "value": {
                      "name": "union",
                      "value": [
                        {
                          "name": "string"
                        },
                        {
                          "name": "number"
                        },
                        {
                          "name": "bool"
                        },
                        {
                          "name": "object"
                        }
                      ]
                    }
                  }
                ]
              },
              "required": false,
              "description": "The input value, required for a controlled component."
            }
          }
        }
      ]
    },
    {
      "key": "src/FormControl/FormControl.js",
      "value": [
        {
          "description": "",
          "displayName": "FormControl",
          "methods": [],
          "actualName": "FormControl",
          "props": {
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The contents of the form control."
            },
            "classes": {
              "type": {
                "name": "object"
              },
              "required": true,
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details."
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "@ignore"
            },
            "component": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The component used for the root node.\nEither a string to use a DOM element or a component."
            },
            "disabled": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the label, input and helper text should be displayed in a disabled state."
            },
            "error": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the label should be displayed in an error state."
            },
            "fullWidth": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the component will take up the full width of its container."
            },
            "margin": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "\"none\"",
                    "computed": false
                  },
                  {
                    "value": "\"dense\"",
                    "computed": false
                  },
                  {
                    "value": "\"normal\"",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "If `dense` or `normal`, will adjust vertical spacing of this and contained components."
            },
            "required": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the label will indicate that the input is required."
            },
            "variant": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "\"standard\"",
                    "computed": false
                  },
                  {
                    "value": "\"outlined\"",
                    "computed": false
                  },
                  {
                    "value": "\"filled\"",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "The variant to use."
            }
          }
        }
      ]
    },
    {
      "key": "src/FormGroup/FormGroup.js",
      "value": [
        {
          "description": "",
          "displayName": "FormGroup",
          "methods": [],
          "actualName": "FormGroup",
          "props": {
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The content of the component."
            },
            "classes": {
              "type": {
                "name": "object"
              },
              "required": true,
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details."
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "@ignore"
            },
            "row": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "Display group of elements in a compact row."
            }
          }
        }
      ]
    },
    {
      "key": "src/FormHelperText/FormHelperText.js",
      "value": [
        {
          "description": "",
          "displayName": "FormHelperText",
          "methods": [],
          "actualName": "FormHelperText",
          "props": {
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The content of the component."
            },
            "classes": {
              "type": {
                "name": "object"
              },
              "required": true,
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details."
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "@ignore"
            },
            "component": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The component used for the root node.\nEither a string to use a DOM element or a component."
            },
            "disabled": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the helper text should be displayed in a disabled state."
            },
            "error": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, helper text should be displayed in an error state."
            },
            "filled": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the helper text should use filled classes key."
            },
            "focused": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the helper text should use focused classes key."
            },
            "margin": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "\"dense\"",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "If `dense`, will adjust vertical spacing. This is normally obtained via context from\nFormControl."
            },
            "muiFormControl": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "@ignore"
            },
            "required": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the helper text should use required classes key."
            },
            "variant": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "\"standard\"",
                    "computed": false
                  },
                  {
                    "value": "\"outlined\"",
                    "computed": false
                  },
                  {
                    "value": "\"filled\"",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "The variant to use."
            }
          }
        }
      ]
    },
    {
      "key": "src/FormControlLabel/FormControlLabel.js",
      "value": [
        {
          "description": "",
          "displayName": "FormControlLabel",
          "methods": [],
          "actualName": "FormControlLabel",
          "props": {
            "checked": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "bool"
                  },
                  {
                    "name": "string"
                  }
                ]
              },
              "required": false,
              "description": "If `true`, the component appears selected."
            },
            "classes": {
              "type": {
                "name": "object"
              },
              "required": true,
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details."
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "@ignore"
            },
            "control": {
              "type": {
                "name": "element"
              },
              "required": false,
              "description": "A control element. For instance, it can be be a `Radio`, a `Switch` or a `Checkbox`."
            },
            "disabled": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the control will be disabled."
            },
            "inputRef": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "func"
                  },
                  {
                    "name": "object"
                  }
                ]
              },
              "required": false,
              "description": "Use that property to pass a ref callback to the native input component."
            },
            "label": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The text to be used in an enclosing label element."
            },
            "labelPlacement": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "'end'",
                    "computed": false
                  },
                  {
                    "value": "'start'",
                    "computed": false
                  },
                  {
                    "value": "'top'",
                    "computed": false
                  },
                  {
                    "value": "'bottom'",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "The position of the label."
            },
            "muiFormControl": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "@ignore"
            },
            "name": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": ""
            },
            "onChange": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "Callback fired when the state is changed.\n\n@param {object} event The event source of the callback.\nYou can pull out the new value by accessing `event.target.checked`.\n@param {boolean} checked The `checked` value of the switch"
            },
            "value": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "The value of the component."
            }
          }
        }
      ]
    },
    {
      "key": "src/FormLabel/FormLabel.js",
      "value": [
        {
          "description": "",
          "displayName": "FormLabel",
          "methods": [],
          "actualName": "FormLabel",
          "props": {
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The content of the component."
            },
            "classes": {
              "type": {
                "name": "object"
              },
              "required": true,
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details."
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "@ignore"
            },
            "component": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The component used for the root node.\nEither a string to use a DOM element or a component."
            },
            "disabled": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the label should be displayed in a disabled state."
            },
            "error": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the label should be displayed in an error state."
            },
            "filled": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the label should use filled classes key."
            },
            "focused": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the input of this label is focused (used by `FormGroup` components)."
            },
            "muiFormControl": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "@ignore"
            },
            "required": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the label will indicate that the input is required."
            }
          }
        }
      ]
    },
    {
      "key": "src/Grid/Grid.js",
      "value": [
        {
          "description": "",
          "displayName": "Grid",
          "methods": [],
          "actualName": "Grid",
          "props": {
            "alignContent": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "\"stretch\"",
                    "computed": false
                  },
                  {
                    "value": "\"center\"",
                    "computed": false
                  },
                  {
                    "value": "\"flex-start\"",
                    "computed": false
                  },
                  {
                    "value": "\"flex-end\"",
                    "computed": false
                  },
                  {
                    "value": "\"space-between\"",
                    "computed": false
                  },
                  {
                    "value": "\"space-around\"",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "Defines the `align-content` style property.\nIt's applied for all screen sizes."
            },
            "alignItems": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "\"flex-start\"",
                    "computed": false
                  },
                  {
                    "value": "\"center\"",
                    "computed": false
                  },
                  {
                    "value": "\"flex-end\"",
                    "computed": false
                  },
                  {
                    "value": "\"stretch\"",
                    "computed": false
                  },
                  {
                    "value": "\"baseline\"",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "Defines the `align-items` style property.\nIt's applied for all screen sizes."
            },
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The content of the component."
            },
            "classes": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details."
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "@ignore"
            },
            "component": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "The component used for the root node.\nEither a string to use a DOM element or a component."
            },
            "container": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the component will have the flex *container* behavior.\nYou should be wrapping *items* with a *container*."
            },
            "direction": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "\"row\"",
                    "computed": false
                  },
                  {
                    "value": "\"row-reverse\"",
                    "computed": false
                  },
                  {
                    "value": "\"column\"",
                    "computed": false
                  },
                  {
                    "value": "\"column-reverse\"",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "Defines the `flex-direction` style property.\nIt is applied for all screen sizes."
            },
            "item": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the component will have the flex *item* behavior.\nYou should be wrapping *items* with a *container*."
            },
            "justify": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "\"flex-start\"",
                    "computed": false
                  },
                  {
                    "value": "\"center\"",
                    "computed": false
                  },
                  {
                    "value": "\"flex-end\"",
                    "computed": false
                  },
                  {
                    "value": "\"space-between\"",
                    "computed": false
                  },
                  {
                    "value": "\"space-around\"",
                    "computed": false
                  },
                  {
                    "value": "\"space-evenly\"",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "Defines the `justify-content` style property.\nIt is applied for all screen sizes."
            },
            "lg": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "number"
                  },
                  {
                    "name": "bool"
                  },
                  {
                    "name": "string"
                  }
                ]
              },
              "required": false,
              "description": "Defines the number of grids the component is going to use.\nIt's applied for the `lg` breakpoint and wider screens if not overridden.  1-12, true, false, or auto."
            },
            "md": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "number"
                  },
                  {
                    "name": "bool"
                  },
                  {
                    "name": "string"
                  }
                ]
              },
              "required": false,
              "description": "Defines the number of grids the component is going to use.\nIt's applied for the `md` breakpoint and wider screens if not overridden.  1-12, true, false, or auto."
            },
            "sm": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "number"
                  },
                  {
                    "name": "bool"
                  },
                  {
                    "name": "string"
                  }
                ]
              },
              "required": false,
              "description": "Defines the number of grids the component is going to use.\nIt's applied for the `sm` breakpoint and wider screens if not overridden.  1-12, true, false, or auto."
            },
            "spacing": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "0",
                    "computed": false
                  },
                  {
                    "value": "1",
                    "computed": false
                  },
                  {
                    "value": "2",
                    "computed": false
                  },
                  {
                    "value": "3",
                    "computed": false
                  },
                  {
                    "value": "4",
                    "computed": false
                  },
                  {
                    "value": "5",
                    "computed": false
                  },
                  {
                    "value": "6",
                    "computed": false
                  },
                  {
                    "value": "7",
                    "computed": false
                  },
                  {
                    "value": "8",
                    "computed": false
                  },
                  {
                    "value": "9",
                    "computed": false
                  },
                  {
                    "value": "10",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "Defines the space between the type `item` component.\nIt can only be used on a type `container` component."
            },
            "wrap": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "\"nowrap\"",
                    "computed": false
                  },
                  {
                    "value": "\"wrap\"",
                    "computed": false
                  },
                  {
                    "value": "\"wrap-reverse\"",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "Defines the `flex-wrap` style property.\nIt's applied for all screen sizes."
            },
            "xl": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "number"
                  },
                  {
                    "name": "bool"
                  },
                  {
                    "name": "string"
                  }
                ]
              },
              "required": false,
              "description": "Defines the number of grids the component is going to use.\nIt's applied for the `xl` breakpoint and wider screens.  1-12, true, false, or auto."
            },
            "xs": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "number"
                  },
                  {
                    "name": "bool"
                  },
                  {
                    "name": "string"
                  }
                ]
              },
              "required": false,
              "description": "Defines the number of grids the component is going to use.\nIt's applied for all the screen sizes with the lowest priority. 1-12, true, false, or auto."
            },
            "zeroMinWidth": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, it sets `min-width: 0` on the item.\nRefer to the limitations section of the documentation to better understand the use case."
            }
          }
        }
      ]
    },
    {
      "key": "src/GridList/GridList.js",
      "value": [
        {
          "description": "",
          "displayName": "GridList",
          "methods": [],
          "actualName": "GridList",
          "props": {
            "cellHeight": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "number"
                  },
                  {
                    "name": "enum",
                    "value": [
                      {
                        "value": "'auto'",
                        "computed": false
                      }
                    ]
                  }
                ]
              },
              "required": false,
              "description": "Number of px for one cell height.\nYou can set `'auto'` if you want to let the children determine the height."
            },
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "Grid Tiles that will be in Grid List."
            },
            "classes": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details."
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "@ignore"
            },
            "cols": {
              "type": {
                "name": "number"
              },
              "required": false,
              "description": "Number of columns."
            },
            "component": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "The component used for the root node.\nEither a string to use a DOM element or a component."
            },
            "spacing": {
              "type": {
                "name": "number"
              },
              "required": false,
              "description": "Number of px for the spacing between tiles."
            },
            "style": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "@ignore"
            }
          }
        }
      ]
    },
    {
      "key": "src/GridListTile/GridListTile.js",
      "value": [
        {
          "description": "",
          "displayName": "GridListTile",
          "methods": [],
          "actualName": "GridListTile",
          "props": {
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "Theoretically you can pass any node as children, but the main use case is to pass an img,\nin which case GridListTile takes care of making the image \"cover\" available space\n(similar to `background-size: cover` or to `object-fit: cover`)."
            },
            "classes": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details."
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "@ignore"
            },
            "cols": {
              "type": {
                "name": "number"
              },
              "required": false,
              "description": "Width of the tile in number of grid cells."
            },
            "component": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "The component used for the root node.\nEither a string to use a DOM element or a component."
            },
            "rows": {
              "type": {
                "name": "number"
              },
              "required": false,
              "description": "Height of the tile in number of grid cells."
            }
          }
        }
      ]
    },
    {
      "key": "src/Icon/Icon.js",
      "value": [
        {
          "description": "",
          "displayName": "Icon",
          "methods": [],
          "actualName": "Icon",
          "props": {
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The name of the icon  font ligature."
            },
            "classes": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Override or extend the styles applied to the component."
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": ""
            },
            "color": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "\"inherit\"",
                    "computed": false
                  },
                  {
                    "value": "\"primary\"",
                    "computed": false
                  },
                  {
                    "value": "\"secondary\"",
                    "computed": false
                  },
                  {
                    "value": "\"action\"",
                    "computed": false
                  },
                  {
                    "value": "\"error\"",
                    "computed": false
                  },
                  {
                    "value": "\"disabled\"",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "The color of the component. It supports those theme colors that make sense for this component."
            },
            "fontSize": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "\"inherit\"",
                    "computed": false
                  },
                  {
                    "value": "\"default\"",
                    "computed": false
                  },
                  {
                    "value": "\"small\"",
                    "computed": false
                  },
                  {
                    "value": "\"large\"",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size."
            }
          }
        }
      ]
    },
    {
      "key": "src/GridListTileBar/GridListTileBar.js",
      "value": [
        {
          "description": "",
          "displayName": "GridListTileBar",
          "methods": [],
          "actualName": "GridListTileBar",
          "props": {
            "actionIcon": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "An IconButton element to be used as secondary action target\n(primary action target is the tile itself)."
            },
            "actionPosition": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "'left'",
                    "computed": false
                  },
                  {
                    "value": "'right'",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "Position of secondary action IconButton."
            },
            "classes": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details."
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "@ignore"
            },
            "subtitle": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "String or element serving as subtitle (support text)."
            },
            "title": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "Title to be displayed on tile."
            },
            "titlePosition": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "'top'",
                    "computed": false
                  },
                  {
                    "value": "'bottom'",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "Position of the title bar."
            }
          }
        }
      ]
    },
    {
      "key": "src/IconButton/IconButton.js",
      "value": [
        {
          "description": "",
          "displayName": "IconButton",
          "methods": [],
          "actualName": "IconButton",
          "props": {
            "onClick": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": ""
            },
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The icon element."
            },
            "classes": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Override or extend the styles applied to the component."
            },
            "color": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "\"default\"",
                    "computed": false
                  },
                  {
                    "value": "\"inherit\"",
                    "computed": false
                  },
                  {
                    "value": "\"primary\"",
                    "computed": false
                  },
                  {
                    "value": "\"secondary\"",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "The color of the component. It supports those theme colors that make sense for this component."
            },
            "disabled": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the button will be disabled."
            },
            "disableRipple": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the ripple will be disabled."
            }
          }
        }
      ]
    },
    {
      "key": "src/IconUXP/IconUXP.js",
      "value": [
        {
          "description": "",
          "displayName": "IconUXP",
          "methods": [],
          "actualName": "IconUXP",
          "props": {
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The name of the icon from https://material.io/tools/icons."
            },
            "color": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "\"inherit\"",
                    "computed": false
                  },
                  {
                    "value": "\"primary\"",
                    "computed": false
                  },
                  {
                    "value": "\"secondary\"",
                    "computed": false
                  },
                  {
                    "value": "\"action\"",
                    "computed": false
                  },
                  {
                    "value": "\"error\"",
                    "computed": false
                  },
                  {
                    "value": "\"disabled\"",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "The color of the component. It supports those theme colors that make sense for this component."
            },
            "fontSize": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "\"inherit\"",
                    "computed": false
                  },
                  {
                    "value": "\"default\"",
                    "computed": false
                  },
                  {
                    "value": "\"small\"",
                    "computed": false
                  },
                  {
                    "value": "\"large\"",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size."
            }
          }
        }
      ]
    },
    {
      "key": "src/IglooAppbar/IglooAppbar.js",
      "value": [
        {
          "description": "",
          "displayName": "IglooAppbar",
          "methods": [],
          "actualName": "IglooAppbar"
        }
      ]
    },
    {
      "key": "src/IglooHeader/IglooHeader.js",
      "value": [
        {
          "description": "",
          "displayName": "IglooHeader",
          "methods": [],
          "actualName": "IglooHeader"
        }
      ]
    },
    {
      "key": "src/IglooLargeHeader/IglooLargeHeader.js",
      "value": [
        {
          "description": "",
          "displayName": "IglooLargeHeader",
          "methods": [],
          "actualName": "IglooLargeHeader"
        }
      ]
    },
    {
      "key": "src/IglooSideNavigation/IglooSideNavigation.js",
      "value": [
        {
          "description": "",
          "displayName": "IglooSideNavigation",
          "methods": [
            {
              "name": "handleClick",
              "docblock": null,
              "modifiers": [],
              "params": [
                {
                  "name": "item",
                  "type": null
                }
              ],
              "returns": null
            },
            {
              "name": "handler",
              "docblock": null,
              "modifiers": [],
              "params": [
                {
                  "name": "children",
                  "type": null
                }
              ],
              "returns": null
            }
          ],
          "actualName": "IglooSideNavigation"
        }
      ]
    },
    {
      "key": "src/IglooSmallHeader/IglooSmallHeader.js",
      "value": [
        {
          "description": "",
          "displayName": "IglooSmallHeader",
          "methods": [],
          "actualName": "IglooSmallHeader",
          "props": {
            "menus": {
              "type": {
                "name": "arrayOf",
                "value": {
                  "name": "shape",
                  "value": {
                    "icon": {
                      "name": "string",
                      "required": false
                    },
                    "label": {
                      "name": "string",
                      "required": false
                    },
                    "children": {
                      "name": "arrayOf",
                      "value": {
                        "name": "shape",
                        "value": {}
                      },
                      "required": false
                    }
                  }
                }
              },
              "required": false,
              "description": "",
              "defaultValue": {
                "value": "[]",
                "computed": false
              }
            },
            "logoSrc": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "",
              "defaultValue": {
                "value": "\"https://uc.uxpin.com/files/732773/730600/image-6d6f68.png\"",
                "computed": false
              }
            },
            "logoAlt": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "",
              "defaultValue": {
                "value": "\"IGLOO Design System\"",
                "computed": false
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/IglooLayout/IglooLayout.js",
      "value": [
        {
          "description": "",
          "displayName": "IglooLayout",
          "methods": [],
          "actualName": "IglooLayout"
        }
      ]
    },
    {
      "key": "src/Image/Image.js",
      "value": [
        {
          "description": "",
          "displayName": "Image",
          "methods": [],
          "actualName": "Image",
          "props": {
            "alt": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": ""
            },
            "height": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "",
              "defaultValue": {
                "value": "\"100%\"",
                "computed": false
              }
            },
            "width": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "",
              "defaultValue": {
                "value": "\"100%\"",
                "computed": false
              }
            },
            "objectFit": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "\"fill\"",
                    "computed": false
                  },
                  {
                    "value": "\"contain\"",
                    "computed": false
                  },
                  {
                    "value": "\"cover\"",
                    "computed": false
                  },
                  {
                    "value": "\"none\"",
                    "computed": false
                  },
                  {
                    "value": "\"scale-down\"",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "",
              "defaultValue": {
                "value": "\"cover\"",
                "computed": false
              }
            },
            "src": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "",
              "defaultValue": {
                "value": "\"http://uxpin.com/images/homepage/about-us/location-gdynia.jpg\"",
                "computed": false
              }
            },
            "style": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": ""
            }
          }
        }
      ]
    },
    {
      "key": "src/Input/Input.js",
      "value": [
        {
          "description": "",
          "displayName": "Input",
          "methods": [],
          "actualName": "Input",
          "props": {
            "autoComplete": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "This property helps users to fill forms faster, especially on mobile devices.\nThe name can be confusing, as it's more like an autofill.\nYou can learn more about it here:\nhttps://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill"
            },
            "autoFocus": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the input will be focused during the first mount."
            },
            "classes": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Override or extend the styles applied to the component."
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "The CSS class name of the wrapper element."
            },
            "defaultValue": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "number"
                  },
                  {
                    "name": "bool"
                  },
                  {
                    "name": "object"
                  },
                  {
                    "name": "arrayOf",
                    "value": {
                      "name": "union",
                      "value": [
                        {
                          "name": "string"
                        },
                        {
                          "name": "number"
                        },
                        {
                          "name": "bool"
                        },
                        {
                          "name": "object"
                        }
                      ]
                    }
                  }
                ]
              },
              "required": false,
              "description": "The default input value, useful when not controlling the component."
            },
            "disabled": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the input will be disabled."
            },
            "endAdornment": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "End `InputAdornment` for this component."
            },
            "error": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the input will indicate an error. This is normally obtained via context from\nFormControl."
            },
            "fullWidth": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the input will take up the full width of its container."
            },
            "id": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "The id of the `input` element."
            },
            "inputComponent": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The component used for the native input.\nEither a string to use a DOM element or a component."
            },
            "inputProps": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Attributes applied to the `input` element."
            },
            "inputRef": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "func"
                  },
                  {
                    "name": "object"
                  }
                ]
              },
              "required": false,
              "description": "Use that property to pass a ref callback to the native input component."
            },
            "labelWidth": {
              "type": {
                "name": "number"
              },
              "required": false,
              "description": "The width of the legend."
            },
            "margin": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "'dense'",
                    "computed": false
                  },
                  {
                    "value": "'none'",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "If `dense`, will adjust vertical spacing. This is normally obtained via context from\nFormControl."
            },
            "multiline": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, a textarea element will be rendered."
            },
            "name": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "Name attribute of the `input` element."
            },
            "notched": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the outline is notched to accommodate the label."
            },
            "onChange": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "Callback fired when the value is changed.\n\n@param {object} event The event source of the callback.\nYou can pull out the new value by accessing `event.target.value`."
            },
            "placeholder": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "The short hint displayed in the input before the user enters a value."
            },
            "readOnly": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "It prevents the user from changing the value of the field\n(not from interacting with the field)."
            },
            "required": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the input will be required."
            },
            "rows": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "number"
                  }
                ]
              },
              "required": false,
              "description": "Number of rows to display when multiline option is set to true."
            },
            "rowsMax": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "number"
                  }
                ]
              },
              "required": false,
              "description": "Maximum number of rows to display when multiline option is set to true."
            },
            "startAdornment": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "Start `InputAdornment` for this component."
            },
            "type": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "Type of the input element. It should be a valid HTML5 input type."
            },
            "value": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "number"
                  },
                  {
                    "name": "bool"
                  },
                  {
                    "name": "object"
                  },
                  {
                    "name": "arrayOf",
                    "value": {
                      "name": "union",
                      "value": [
                        {
                          "name": "string"
                        },
                        {
                          "name": "number"
                        },
                        {
                          "name": "bool"
                        },
                        {
                          "name": "object"
                        }
                      ]
                    }
                  }
                ]
              },
              "required": false,
              "description": "The input value, required for a controlled component."
            }
          }
        }
      ]
    },
    {
      "key": "src/InputLabel/InputLabel.js",
      "value": [
        {
          "description": "",
          "displayName": "InputLabel",
          "methods": [],
          "actualName": "InputLabel",
          "props": {
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The contents of the `InputLabel`."
            },
            "classes": {
              "type": {
                "name": "object"
              },
              "required": true,
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details."
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "@ignore"
            },
            "disableAnimation": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the transition animation is disabled."
            },
            "disabled": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, apply disabled class."
            },
            "error": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the label will be displayed in an error state."
            },
            "focused": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the input of this label is focused."
            },
            "FormLabelClasses": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "`classes` property applied to the [`FormLabel`](/api/form-label/) element."
            },
            "margin": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "\"dense\"",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "If `dense`, will adjust vertical spacing. This is normally obtained via context from\nFormControl."
            },
            "muiFormControl": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "@ignore"
            },
            "required": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "if `true`, the label will indicate that the input is required."
            },
            "shrink": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the label is shrunk."
            },
            "variant": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "\"standard\"",
                    "computed": false
                  },
                  {
                    "value": "\"outlined\"",
                    "computed": false
                  },
                  {
                    "value": "\"filled\"",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "The variant to use."
            }
          }
        }
      ]
    },
    {
      "key": "src/LinearProgress/LinearProgress.js",
      "value": [
        {
          "description": "",
          "displayName": "LinearProgress",
          "methods": [],
          "actualName": "LinearProgress",
          "props": {
            "classes": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details."
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "@ignore"
            },
            "color": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "'primary'",
                    "computed": false
                  },
                  {
                    "value": "'secondary'",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "The color of the component. It supports those theme colors that make sense for this component."
            },
            "value": {
              "type": {
                "name": "number"
              },
              "required": false,
              "description": "The value of the progress indicator for the determinate and buffer variants.\nValue between 0 and 100."
            },
            "valueBuffer": {
              "type": {
                "name": "number"
              },
              "required": false,
              "description": "The value for the buffer variant.\nValue between 0 and 100."
            },
            "variant": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "'determinate'",
                    "computed": false
                  },
                  {
                    "value": "'indeterminate'",
                    "computed": false
                  },
                  {
                    "value": "'buffer'",
                    "computed": false
                  },
                  {
                    "value": "'query'",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "The variant to use.\nUse indeterminate or query when there is no progress value."
            }
          }
        }
      ]
    },
    {
      "key": "src/Link/Link.js",
      "value": [
        {
          "description": "",
          "displayName": "Link",
          "methods": [],
          "actualName": "Link",
          "props": {
            "onClick": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": ""
            },
            "block": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "Controls whether the link is inline or not. When `block` is true the link is not inline\n when `block` is false it is."
            },
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The content of the link."
            },
            "classes": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details."
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "@ignore"
            },
            "color": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "'error'",
                    "computed": false
                  },
                  {
                    "value": "'inherit'",
                    "computed": false
                  },
                  {
                    "value": "'primary'",
                    "computed": false
                  },
                  {
                    "value": "'secondary'",
                    "computed": false
                  },
                  {
                    "value": "'textPrimary'",
                    "computed": false
                  },
                  {
                    "value": "'textSecondary'",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "The color of the link."
            },
            "component": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "The component used for the root node.\nEither a string to use a DOM element or a component."
            },
            "target": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "'_self'",
                    "computed": false
                  },
                  {
                    "value": "'_blank'",
                    "computed": false
                  },
                  {
                    "value": "'_parent'",
                    "computed": false
                  },
                  {
                    "value": "'_top'",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "The target of the link. You can read about this property on the\n[MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#Attributes)"
            },
            "TypographyClasses": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "`classes` property applied to the [`Typography`](/api/typography/) element."
            },
            "underline": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "'none'",
                    "computed": false
                  },
                  {
                    "value": "'hover'",
                    "computed": false
                  },
                  {
                    "value": "'always'",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "Controls when the link should have an underline."
            },
            "variant": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "Applies the theme typography styles."
            }
          }
        }
      ]
    },
    {
      "key": "src/List/List.js",
      "value": [
        {
          "description": "",
          "displayName": "List",
          "methods": [],
          "actualName": "List",
          "props": {
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The content of the component."
            },
            "classes": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details."
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "@ignore"
            },
            "component": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "The component used for the root node.\nEither a string to use a DOM element or a component."
            },
            "dense": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, compact vertical padding designed for keyboard and mouse input will be used for\nthe list and list items. The property is available to descendant components as the\n`dense` context."
            },
            "disablePadding": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, vertical padding will be removed from the list."
            },
            "subheader": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The content of the subheader, normally `ListSubheader`."
            }
          }
        }
      ]
    },
    {
      "key": "src/ListItem/ListItem.js",
      "value": [
        {
          "description": "",
          "displayName": "ListItem",
          "methods": [],
          "actualName": "ListItem",
          "props": {
            "alignItems": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "'flex-start'",
                    "computed": false
                  },
                  {
                    "value": "'center'",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "Defines the `align-items` style property."
            },
            "button": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the list item will be a button (using `ButtonBase`)."
            },
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The content of the component."
            },
            "classes": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details."
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "@ignore"
            },
            "component": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "The component used for the root node.\nEither a string to use a DOM element or a component.\nBy default, it's a `li` when `button` is `false` and a `div` when `button` is `true`."
            },
            "ContainerComponent": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The container component used when a `ListItemSecondaryAction` is rendered."
            },
            "ContainerProps": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Properties applied to the container element when the component\nis used to display a `ListItemSecondaryAction`."
            },
            "dense": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, compact vertical padding designed for keyboard and mouse input will be used."
            },
            "disabled": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the list item will be disabled."
            },
            "disableGutters": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the left and right padding is removed."
            },
            "divider": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, a 1px light border is added to the bottom of the list item."
            },
            "focusVisibleClassName": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "@ignore"
            },
            "selected": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "Use to apply selected styling."
            }
          }
        }
      ]
    },
    {
      "key": "src/ListItemAvatar/ListItemAvatar.js",
      "value": [
        {
          "description": "",
          "displayName": "ListItemAvatar",
          "methods": [],
          "actualName": "ListItemAvatar",
          "props": {
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The content of the component – normally `Avatar`."
            },
            "classes": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details."
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "@ignore"
            }
          }
        }
      ]
    },
    {
      "key": "src/ListItemIcon/ListItemIcon.js",
      "value": [
        {
          "description": "",
          "displayName": "ListItemIcon",
          "methods": [],
          "actualName": "ListItemIcon",
          "props": {
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The content of the component, normally `Icon`, `SvgIcon`,\nor a `@material-ui/icons` SVG icon element."
            },
            "classes": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details."
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "@ignore"
            }
          }
        }
      ]
    },
    {
      "key": "src/ListItemSecondaryAction/ListItemSecondaryAction.js",
      "value": [
        {
          "description": "",
          "displayName": "ListItemSecondaryAction",
          "methods": [],
          "actualName": "ListItemSecondaryAction",
          "props": {
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The content of the component, normally an `IconButton` or selection control."
            },
            "classes": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details."
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "@ignore"
            }
          }
        }
      ]
    },
    {
      "key": "src/ListItemText/ListItemText.js",
      "value": [
        {
          "description": "",
          "displayName": "ListItemText",
          "methods": [],
          "actualName": "ListItemText",
          "props": {
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "Alias for the `primary` property."
            },
            "classes": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details."
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "@ignore"
            },
            "disableTypography": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the children won't be wrapped by a Typography component.\nThis can be useful to render an alternative Typography variant by wrapping\nthe `children` (or `primary`) text, and optional `secondary` text\nwith the Typography component."
            },
            "inset": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the children will be indented.\nThis should be used if there is no left avatar or left icon."
            },
            "primary": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The main content element."
            },
            "primaryTypographyProps": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "These props will be forwarded to the primary typography component\n(as long as disableTypography is not `true`)."
            },
            "secondary": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The secondary content element."
            },
            "secondaryTypographyProps": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "These props will be forwarded to the secondary typography component\n(as long as disableTypography is not `true`)."
            },
            "theme": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "@ignore"
            }
          }
        }
      ]
    },
    {
      "key": "src/ListSubheader/ListSubheader.js",
      "value": [
        {
          "description": "",
          "displayName": "ListSubheader",
          "methods": [],
          "actualName": "ListSubheader",
          "props": {
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The content of the component."
            },
            "classes": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details."
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "@ignore"
            },
            "color": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "'default'",
                    "computed": false
                  },
                  {
                    "value": "'primary'",
                    "computed": false
                  },
                  {
                    "value": "'inherit'",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "The color of the component. It supports those theme colors that make sense for this component."
            },
            "component": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "The component used for the root node.\nEither a string to use a DOM element or a component."
            },
            "disableGutters": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the List Subheader will not have gutters."
            },
            "disableSticky": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the List Subheader will not stick to the top during scroll."
            },
            "inset": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the List Subheader will be indented."
            }
          }
        }
      ]
    },
    {
      "key": "src/Main/Main.js",
      "value": [
        {
          "description": "",
          "displayName": "Main",
          "methods": [],
          "actualName": "Main",
          "props": {
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": ""
            }
          }
        }
      ]
    },
    {
      "key": "src/Menu/Menu.js",
      "value": [
        {
          "description": "",
          "displayName": "Menu",
          "methods": [],
          "actualName": "Menu",
          "props": {
            "anchorEl": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "object"
                  },
                  {
                    "name": "func"
                  }
                ]
              },
              "required": false,
              "description": "The DOM element used to set the position of the menu."
            },
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "Menu contents, normally `MenuItem`s."
            },
            "classes": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details."
            },
            "disableAutoFocusItem": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the selected / first menu item will not be auto focused."
            },
            "MenuListProps": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Properties applied to the [`MenuList`](/api/menu-list/) element."
            },
            "onClose": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "Callback fired when the component requests to be closed.\n\n@param {object} event The event source of the callback\n@param {string} reason Can be:`\"escapeKeyDown\"`, `\"backdropClick\"`, `\"tabKeyDown\"`"
            },
            "onEnter": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "Callback fired before the Menu enters."
            },
            "onEntered": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "Callback fired when the Menu has entered."
            },
            "onEntering": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "Callback fired when the Menu is entering."
            },
            "onExit": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "Callback fired before the Menu exits."
            },
            "onExited": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "Callback fired when the Menu has exited."
            },
            "onExiting": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "Callback fired when the Menu is exiting."
            },
            "open": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the menu is visible."
            },
            "PaperProps": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "@ignore"
            },
            "PopoverClasses": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "`classes` property applied to the [`Popover`](/api/popover/) element."
            },
            "theme": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "@ignore"
            },
            "transitionDuration": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "number"
                  },
                  {
                    "name": "shape",
                    "value": {
                      "enter": {
                        "name": "number",
                        "required": false
                      },
                      "exit": {
                        "name": "number",
                        "required": false
                      }
                    }
                  },
                  {
                    "name": "enum",
                    "value": [
                      {
                        "value": "'auto'",
                        "computed": false
                      }
                    ]
                  }
                ]
              },
              "required": false,
              "description": "The length of the transition in `ms`, or 'auto'"
            }
          }
        }
      ]
    },
    {
      "key": "src/MenuExposedUXP/MenuExposedUXP.js",
      "value": [
        {
          "description": "",
          "displayName": "MenuExposedUXP",
          "methods": [
            {
              "name": "handleChange",
              "docblock": null,
              "modifiers": [],
              "params": [],
              "returns": null
            },
            {
              "name": "renderAdornment",
              "docblock": null,
              "modifiers": [],
              "params": [],
              "returns": null
            }
          ],
          "actualName": "MenuExposedUXP",
          "props": {
            "variant": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "\"standard\"",
                    "computed": false
                  },
                  {
                    "value": "\"outlined\"",
                    "computed": false
                  },
                  {
                    "value": "\"filled\"",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "The variant to use.",
              "defaultValue": {
                "value": "\"outlined\"",
                "computed": false
              }
            },
            "label": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "The label content.",
              "defaultValue": {
                "value": "\"Phone Type\"",
                "computed": false
              }
            },
            "menuItems": {
              "type": {
                "name": "array"
              },
              "required": false,
              "description": "List of menu items.\nRequired: label, value (must be unique)\nOptional: hasDivider\nFormat:\n  [\n       { label: \"Home\", value: \"1\", },\n       { label: \"Mobile\", value: \"2\", hasDivider: \"true\"},\n       { label: \"Office\", value: \"3\" },\n   ]",
              "defaultValue": {
                "value": "[\n  { label: \"Home\", value: \"1\" },\n  { label: \"Mobile\", value: \"2\" },\n  { label: \"Office\", value: \"3\", hasDivider: \"true\" },\n  { label: \"Emergency\", value: \"4\" }\n]",
                "computed": false
              }
            },
            "defaultValue": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "number"
                  }
                ]
              },
              "required": false,
              "description": "The initially selected menu item."
            },
            "helperText": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "The helper text content."
            },
            "fullWidth": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the input will take up the full width of its container.",
              "defaultValue": {
                "value": "\"true\"",
                "computed": false
              }
            },
            "disabled": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the input will be disabled."
            },
            "required": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the label is displayed as required and the input will be required."
            },
            "error": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the label will be displayed in an error state."
            },
            "autoFocus": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the input will be focused during the first mount."
            },
            "margin": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "\"none\"",
                    "computed": false
                  },
                  {
                    "value": "\"dense\"",
                    "computed": false
                  },
                  {
                    "value": "\"normal\"",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "If `dense` or `normal`, will adjust vertical spacing of this and contained components."
            },
            "onBlur": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": ""
            },
            "onChange": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "Callback fired when the value is changed."
            },
            "onFocus": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": ""
            },
            "adornmentText": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "Prefix text added to the input."
            },
            "adornmentIcon": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "Prefix icon added to the input if adornmentText was not provided."
            }
          }
        }
      ]
    },
    {
      "key": "src/MenuItem/MenuItem.js",
      "value": [
        {
          "description": "",
          "displayName": "MenuItem",
          "methods": [],
          "actualName": "MenuItem",
          "props": {
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "Menu item contents."
            },
            "classes": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Override or extend the styles applied to the component."
            },
            "component": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "The component used for the root node.\nEither a string to use a DOM element or a component."
            },
            "disableGutters": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the left and right padding is removed."
            },
            "role": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": ""
            },
            "selected": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": ""
            },
            "value": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": ""
            },
            "onClick": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": ""
            }
          }
        }
      ]
    },
    {
      "key": "src/MenuList/MenuList.js",
      "value": [
        {
          "description": "",
          "displayName": "MenuList",
          "methods": [],
          "actualName": "MenuList",
          "props": {
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "MenuList contents, normally `MenuListItem`s."
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "@ignore"
            },
            "disableListWrap": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the MenuList items will not wrap focus."
            },
            "onBlur": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "@ignore"
            },
            "onKeyDown": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "@ignore"
            }
          }
        }
      ]
    },
    {
      "key": "src/MenuUXP/MenuUXP.js",
      "value": [
        {
          "description": "",
          "displayName": "MenuUXP",
          "methods": [
            {
              "name": "handleClick",
              "docblock": null,
              "modifiers": [],
              "params": [
                {
                  "name": "event",
                  "type": null
                }
              ],
              "returns": null
            },
            {
              "name": "handleClose",
              "docblock": null,
              "modifiers": [],
              "params": [],
              "returns": null
            }
          ],
          "actualName": "MenuUXP",
          "props": {
            "menuItems": {
              "type": {
                "name": "array"
              },
              "required": false,
              "description": "Menu items. Can have optional icons and dividers\nFormat:\n[\n    { label: \"Profile\"},\n    { label: \"Favorites\"},\n    { label: \"Marketing Lists\"},\n    { label: \"All Orders\", hasDivider: \"true\"},\n    { label: \"Logout\", icon:\"cancel\" }\n  ]",
              "defaultValue": {
                "value": "[\n  { label: \"Profile\" },\n  { label: \"Favorites\" },\n  { label: \"Marketing Lists\" },\n  { label: \"All Orders\", hasDivider: \"true\" },\n  { label: \"Logout\", icon: \"cancel\" }\n]",
                "computed": false
              }
            },
            "trigger": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "\"icon\"",
                    "computed": false
                  },
                  {
                    "value": "\"buton\"",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "",
              "defaultValue": {
                "value": "\"icon\"",
                "computed": false
              }
            },
            "icon": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "The name of the icon from https://material.io/tools/icons.",
              "defaultValue": {
                "value": "\"more_vert\"",
                "computed": false
              }
            },
            "label": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "Label of button or aria-label of icon.",
              "defaultValue": {
                "value": "\"More Items\"",
                "computed": false
              }
            },
            "buttonVariant": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "\"text\"",
                    "computed": false
                  },
                  {
                    "value": "\"outlined\"",
                    "computed": false
                  },
                  {
                    "value": "\"contained\"",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "The type of button."
            },
            "color": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "\"primary\"",
                    "computed": false
                  },
                  {
                    "value": "\"secondary\"",
                    "computed": false
                  },
                  {
                    "value": "\"inherit\"",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "The color of the button or icon."
            },
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": ""
            }
          }
        }
      ]
    },
    {
      "key": "src/OutlinedInput/OutlinedInput.js",
      "value": [
        {
          "description": "",
          "displayName": "OutlinedInput",
          "methods": [],
          "actualName": "OutlinedInput",
          "props": {
            "autoComplete": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "This property helps users to fill forms faster, especially on mobile devices.\nThe name can be confusing, as it's more like an autofill.\nYou can learn more about it here:\nhttps://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill"
            },
            "autoFocus": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the input will be focused during the first mount."
            },
            "classes": {
              "type": {
                "name": "object"
              },
              "required": true,
              "description": "Override or extend the styles applied to the component."
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "The CSS class name of the wrapper element."
            },
            "defaultValue": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "number"
                  },
                  {
                    "name": "bool"
                  },
                  {
                    "name": "object"
                  },
                  {
                    "name": "arrayOf",
                    "value": {
                      "name": "union",
                      "value": [
                        {
                          "name": "string"
                        },
                        {
                          "name": "number"
                        },
                        {
                          "name": "bool"
                        },
                        {
                          "name": "object"
                        }
                      ]
                    }
                  }
                ]
              },
              "required": false,
              "description": "The default input value, useful when not controlling the component."
            },
            "disabled": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the input will be disabled."
            },
            "endAdornment": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "End `InputAdornment` for this component."
            },
            "error": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the input will indicate an error. This is normally obtained via context from\nFormControl."
            },
            "fullWidth": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the input will take up the full width of its container."
            },
            "id": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "The id of the `input` element."
            },
            "inputComponent": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The component used for the native input.\nEither a string to use a DOM element or a component."
            },
            "inputProps": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Attributes applied to the `input` element."
            },
            "inputRef": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "func"
                  },
                  {
                    "name": "object"
                  }
                ]
              },
              "required": false,
              "description": "Use that property to pass a ref callback to the native input component."
            },
            "labelWidth": {
              "type": {
                "name": "number"
              },
              "required": true,
              "description": "The width of the legend."
            },
            "margin": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "'dense'",
                    "computed": false
                  },
                  {
                    "value": "'none'",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "If `dense`, will adjust vertical spacing. This is normally obtained via context from\nFormControl."
            },
            "multiline": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, a textarea element will be rendered."
            },
            "name": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "Name attribute of the `input` element."
            },
            "notched": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the outline is notched to accommodate the label."
            },
            "onChange": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "Callback fired when the value is changed.\n\n@param {object} event The event source of the callback.\nYou can pull out the new value by accessing `event.target.value`."
            },
            "placeholder": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "The short hint displayed in the input before the user enters a value."
            },
            "readOnly": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "It prevents the user from changing the value of the field\n(not from interacting with the field)."
            },
            "required": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the input will be required."
            },
            "rows": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "number"
                  }
                ]
              },
              "required": false,
              "description": "Number of rows to display when multiline option is set to true."
            },
            "rowsMax": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "number"
                  }
                ]
              },
              "required": false,
              "description": "Maximum number of rows to display when multiline option is set to true."
            },
            "startAdornment": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "Start `InputAdornment` for this component."
            },
            "type": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "Type of the input element. It should be a valid HTML5 input type."
            },
            "value": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "number"
                  },
                  {
                    "name": "bool"
                  },
                  {
                    "name": "object"
                  },
                  {
                    "name": "arrayOf",
                    "value": {
                      "name": "union",
                      "value": [
                        {
                          "name": "string"
                        },
                        {
                          "name": "number"
                        },
                        {
                          "name": "bool"
                        },
                        {
                          "name": "object"
                        }
                      ]
                    }
                  }
                ]
              },
              "required": false,
              "description": "The input value, required for a controlled component."
            }
          }
        }
      ]
    },
    {
      "key": "src/Paper/Paper.js",
      "value": [
        {
          "description": "",
          "displayName": "Paper",
          "methods": [],
          "actualName": "Paper",
          "props": {
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The content of the component."
            },
            "classes": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details."
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "@ignore"
            },
            "component": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The component used for the root node.\nEither a string to use a DOM element or a component."
            },
            "elevation": {
              "type": {
                "name": "number"
              },
              "required": false,
              "description": "Shadow depth, corresponds to `dp` in the spec.\nIt's accepting values between 0 and 24 inclusive."
            },
            "square": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, rounded corners are disabled."
            },
            "style": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Custom Style Object"
            }
          }
        }
      ]
    },
    {
      "key": "src/Radio/Radio.js",
      "value": [
        {
          "description": "",
          "displayName": "Radio",
          "methods": [],
          "actualName": "Radio",
          "props": {
            "checked": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "bool"
                  },
                  {
                    "name": "string"
                  }
                ]
              },
              "required": false,
              "description": "If `true`, the component is checked."
            },
            "checkedIcon": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The icon to display when the component is checked."
            },
            "classes": {
              "type": {
                "name": "object"
              },
              "required": true,
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details."
            },
            "color": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "\"primary\"",
                    "computed": false
                  },
                  {
                    "value": "\"secondary\"",
                    "computed": false
                  },
                  {
                    "value": "\"default\"",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "The color of the component. It supports those theme colors that make sense for this component."
            },
            "disabled": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the switch will be disabled."
            },
            "disableRipple": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the ripple effect will be disabled."
            },
            "icon": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The icon to display when the component is unchecked."
            },
            "id": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "The id of the `input` element."
            },
            "inputProps": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Attributes applied to the `input` element."
            },
            "inputRef": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "func"
                  },
                  {
                    "name": "object"
                  }
                ]
              },
              "required": false,
              "description": "Use that property to pass a ref callback to the native input component."
            },
            "onChange": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "Callback fired when the state is changed.\n\n@param {object} event The event source of the callback.\nYou can pull out the new value by accessing `event.target.value`.\n@param {boolean} checked The `checked` value of the switch"
            },
            "type": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "The input component property `type`."
            },
            "value": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "number"
                  },
                  {
                    "name": "bool"
                  }
                ]
              },
              "required": false,
              "description": "The value of the component."
            }
          }
        }
      ]
    },
    {
      "key": "src/RadioGroup/RadioGroup.js",
      "value": [
        {
          "description": "",
          "displayName": "RadioGroup",
          "methods": [],
          "actualName": "RadioGroup",
          "props": {
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The content of the component."
            },
            "name": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "The name used to reference the value of the control."
            },
            "onBlur": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "@ignore"
            },
            "onChange": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "Callback fired when a RadioGroup button is selected.\n\n@param {object} event The event source of the callback.\nYou can pull out the new value by accessing `event.target.value`.\n@param {string} value The `value` of the selected RadioGroup button"
            },
            "onKeyDown": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "@ignore"
            },
            "value": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "number"
                  },
                  {
                    "name": "bool"
                  }
                ]
              },
              "required": false,
              "description": "Value of the selected RadioGroup button."
            }
          }
        }
      ]
    },
    {
      "key": "src/Select/Select.js",
      "value": [
        {
          "description": "",
          "displayName": "Select",
          "methods": [
            {
              "name": "handleChange",
              "docblock": null,
              "modifiers": [],
              "params": [
                {
                  "name": "e",
                  "type": null
                }
              ],
              "returns": null
            }
          ],
          "actualName": "Select",
          "props": {
            "autoWidth": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If true, the width of the popover will automatically be set according to the items inside the\nmenu, otherwise it will be at least the width of the select input."
            },
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The option elements to populate the select with.\nCan be some `MenuItem` when `native` is false and `option` when `native` is true."
            },
            "classes": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Override or extend the styles applied to the component."
            },
            "displayEmpty": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the selected item is displayed even if its value is empty.\nYou can only use it when the `native` property is `false` (default)."
            },
            "IconComponent": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The icon that displays the arrow."
            },
            "input": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "An `Input` element; does not have to be a material-ui specific `Input`."
            },
            "inputProps": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Attributes applied to the `input` element.\nWhen `native` is `true`, the attributes are applied on the `select` element."
            },
            "MenuProps": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": ""
            },
            "multiple": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If true, `value` must be an array and the menu will support multiple selections."
            },
            "native": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the component will be using a native `select` element."
            },
            "onChange": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "Callback function fired when a menu item is selected."
            },
            "onClose": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "Callback fired when the component requests to be closed.\nUse in controlled mode (see open)."
            },
            "onOpen": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "Callback fired when the component requests to be opened.\nUse in controlled mode (see open)."
            },
            "open": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "Control `select` open state.\nYou can only use it when the `native` property is `false` (default)."
            },
            "renderValue": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "Render the selected value.\nYou can only use it when the `native` property is `false` (default)."
            },
            "SelectDisplayProps": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Properties applied to the clickable div element."
            },
            "value": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "number"
                  },
                  {
                    "name": "bool"
                  },
                  {
                    "name": "object"
                  },
                  {
                    "name": "arrayOf",
                    "value": {
                      "name": "union",
                      "value": [
                        {
                          "name": "string"
                        },
                        {
                          "name": "number"
                        },
                        {
                          "name": "bool"
                        },
                        {
                          "name": "object"
                        }
                      ]
                    }
                  }
                ]
              },
              "required": false,
              "description": "The input value.\nThis property is required when the `native` property is `false` (default)."
            }
          }
        }
      ]
    },
    {
      "key": "src/SnackBar/Snackbar.js",
      "value": [
        {
          "description": "",
          "displayName": "Snackbar",
          "methods": [],
          "actualName": "Snackbar",
          "props": {
            "action": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The action to display."
            },
            "anchorOrigin": {
              "type": {
                "name": "shape",
                "value": {
                  "horizontal": {
                    "name": "enum",
                    "value": [
                      {
                        "value": "'left'",
                        "computed": false
                      },
                      {
                        "value": "'center'",
                        "computed": false
                      },
                      {
                        "value": "'right'",
                        "computed": false
                      }
                    ],
                    "required": false
                  },
                  "vertical": {
                    "name": "enum",
                    "value": [
                      {
                        "value": "'top'",
                        "computed": false
                      },
                      {
                        "value": "'bottom'",
                        "computed": false
                      }
                    ],
                    "required": false
                  }
                }
              },
              "required": false,
              "description": "The anchor of the `Snackbar`."
            },
            "autoHideDuration": {
              "type": {
                "name": "number"
              },
              "required": false,
              "description": "The number of milliseconds to wait before automatically calling the\n`onClose` function. `onClose` should then set the state of the `open`\nprop to hide the Snackbar. This behavior is disabled by default with\nthe `null` value."
            },
            "children": {
              "type": {
                "name": "element"
              },
              "required": false,
              "description": "Replace the `SnackbarContent` component."
            },
            "classes": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details."
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "@ignore"
            },
            "ClickAwayListenerProps": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Properties applied to the `ClickAwayListener` element."
            },
            "ContentProps": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Properties applied to the [`SnackbarContent`](/api/snackbar-content/) element."
            },
            "disableWindowBlurListener": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the `autoHideDuration` timer will expire even if the window is not focused."
            },
            "key": {
              "type": {
                "name": "any"
              },
              "required": false,
              "description": "When displaying multiple consecutive Snackbars from a parent rendering a single\n<Snackbar/>, add the key property to ensure independent treatment of each message.\ne.g. <Snackbar key={message} />, otherwise, the message may update-in-place and\nfeatures such as autoHideDuration may be canceled."
            },
            "message": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The message to display."
            },
            "onClose": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "Callback fired when the component requests to be closed.\nTypically `onClose` is used to set state in the parent component,\nwhich is used to control the `Snackbar` `open` prop.\nThe `reason` parameter can optionally be used to control the response to `onClose`,\nfor example ignoring `clickaway`.\n\n@param {object} event The event source of the callback\n@param {string} reason Can be:`\"timeout\"` (`autoHideDuration` expired) or: `\"clickaway\"`"
            },
            "onEnter": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "Callback fired before the transition is entering."
            },
            "onEntered": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "Callback fired when the transition has entered."
            },
            "onEntering": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "Callback fired when the transition is entering."
            },
            "onExit": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "Callback fired before the transition is exiting."
            },
            "onExited": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "Callback fired when the transition has exited."
            },
            "onExiting": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "Callback fired when the transition is exiting."
            },
            "onMouseEnter": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "@ignore"
            },
            "onMouseLeave": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "@ignore"
            },
            "open": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If true, `Snackbar` is open."
            },
            "resumeHideDuration": {
              "type": {
                "name": "number"
              },
              "required": false,
              "description": "The number of milliseconds to wait before dismissing after user interaction.\nIf `autoHideDuration` property isn't specified, it does nothing.\nIf `autoHideDuration` property is specified but `resumeHideDuration` isn't,\nwe default to `autoHideDuration / 2` ms."
            },
            "TransitionComponent": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The component used for the transition."
            },
            "transitionDuration": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "number"
                  },
                  {
                    "name": "shape",
                    "value": {
                      "enter": {
                        "name": "number",
                        "required": false
                      },
                      "exit": {
                        "name": "number",
                        "required": false
                      }
                    }
                  }
                ]
              },
              "required": false,
              "description": "The duration for the transition, in milliseconds.\nYou may specify a single timeout for all transitions, or individually with an object."
            },
            "TransitionProps": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Properties applied to the `Transition` element."
            }
          }
        }
      ]
    },
    {
      "key": "src/SnackBarContent/SnackbarContent.js",
      "value": [
        {
          "description": "",
          "displayName": "SnackbarContent",
          "methods": [],
          "actualName": "SnackbarContent",
          "props": {
            "action": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The action to display."
            },
            "classes": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details."
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "@ignore"
            },
            "message": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The message to display."
            }
          }
        }
      ]
    },
    {
      "key": "src/Switch/Switch.js",
      "value": [
        {
          "description": "",
          "displayName": "Switch",
          "methods": [],
          "actualName": "Switch",
          "props": {
            "checked": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the component is checked."
            },
            "checkedIcon": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The icon to display when the component is checked."
            },
            "classes": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Override or extend the styles applied to the component."
            },
            "color": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "\"primary\"",
                    "computed": false
                  },
                  {
                    "value": "\"secondary\"",
                    "computed": false
                  },
                  {
                    "value": "\"default\"",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "The color of the component. It supports those theme colors that make sense for this component."
            },
            "defaultChecked": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": ""
            },
            "disabled": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the switch will be disabled."
            },
            "disableRipple": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the ripple effect will be disabled."
            },
            "icon": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The icon to display when the component is unchecked."
            },
            "id": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "The id of the `input` element."
            },
            "inputProps": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Attributes applied to the `input` element."
            },
            "inputRef": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "func"
                  },
                  {
                    "name": "object"
                  }
                ]
              },
              "required": false,
              "description": "Use that property to pass a ref callback to the native input component."
            },
            "onChange": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "Callback fired when the state is changed."
            },
            "type": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "The input component property `type`."
            },
            "value": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "number"
                  },
                  {
                    "name": "bool"
                  }
                ]
              },
              "required": false,
              "description": "The value of the component."
            }
          }
        }
      ]
    },
    {
      "key": "src/SliderUXP/SliderUXP.js",
      "value": [
        {
          "description": "",
          "displayName": "Slider",
          "methods": [
            {
              "name": "handleChange",
              "docblock": null,
              "modifiers": [],
              "params": [
                {
                  "name": "event",
                  "type": null
                },
                {
                  "name": "value",
                  "type": null
                }
              ],
              "returns": null
            }
          ],
          "actualName": "Slider",
          "props": {
            "defaultValue": {
              "type": {
                "name": "number"
              },
              "required": false,
              "description": "Initial percentage value of slider."
            },
            "disabled": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the slider will be disabled."
            },
            "classes": {
              "type": {
                "name": "object"
              },
              "required": true,
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details."
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "@ignore"
            },
            "component": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "The component used for the root node.\nEither a string to use a DOM element or a component."
            },
            "max": {
              "type": {
                "name": "number"
              },
              "required": false,
              "description": "The maximum allowed value of the slider.\nShould not be equal to min."
            },
            "min": {
              "type": {
                "name": "number"
              },
              "required": false,
              "description": "The minimum allowed value of the slider.\nShould not be equal to max."
            },
            "onChange": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "Callback function that is fired when the slider's value changed."
            },
            "onDragEnd": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "Callback function that is fired when the slide has stopped moving."
            },
            "onDragStart": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "Callback function that is fired when the slider has begun to move."
            },
            "step": {
              "type": {
                "name": "number"
              },
              "required": false,
              "description": "The granularity the slider can step through values."
            },
            "theme": {
              "type": {
                "name": "object"
              },
              "required": true,
              "description": "@ignore"
            },
            "thumb": {
              "type": {
                "name": "element"
              },
              "required": false,
              "description": "The component used for the slider icon.\nThis is optional, if provided should be a react element."
            },
            "value": {
              "type": {
                "name": "number"
              },
              "required": true,
              "description": "The value of the slider."
            },
            "valueReducer": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "the reducer used to process the value emitted from the slider. If `null` or\nthe same value is returned no change is emitted.\n@param {number} rawValue - value in [min, max]\n@param {SliderProps} props - current props of the Slider\n@param {Event} event - the event the change was triggered from"
            },
            "vertical": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the slider will be vertical."
            }
          }
        }
      ]
    },
    {
      "key": "src/Tab/Tab.js",
      "value": [
        {
          "description": "",
          "displayName": "Tab",
          "methods": [],
          "actualName": "Tab",
          "props": {
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "This property isn't supported.\nUse the `component` property if you need to change the children structure."
            },
            "classes": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details."
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "@ignore"
            },
            "disabled": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the tab will be disabled."
            },
            "fullWidth": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "@ignore"
            },
            "icon": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The icon element."
            },
            "indicator": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "@ignore\nFor server-side rendering consideration, we let the selected tab\nrender the indicator."
            },
            "label": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The label element."
            },
            "onChange": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "@ignore"
            },
            "onClick": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "@ignore"
            },
            "selected": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "@ignore"
            },
            "textColor": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "'secondary'",
                    "computed": false
                  },
                  {
                    "value": "'primary'",
                    "computed": false
                  },
                  {
                    "value": "'inherit'",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "@ignore"
            },
            "value": {
              "type": {
                "name": "any"
              },
              "required": false,
              "description": "You can provide your own value. Otherwise, we fallback to the child position index."
            }
          }
        }
      ]
    },
    {
      "key": "src/Table/Table.js",
      "value": [
        {
          "description": "",
          "displayName": "SimpleTable",
          "methods": [],
          "actualName": "SimpleTable",
          "props": {
            "classes": {
              "type": {
                "name": "object"
              },
              "required": true,
              "description": ""
            }
          }
        }
      ]
    },
    {
      "key": "src/Tabs/Tabs.js",
      "value": [
        {
          "description": "",
          "displayName": "Tabs",
          "methods": [
            {
              "name": "handleChange",
              "docblock": null,
              "modifiers": [],
              "params": [
                {
                  "name": "event",
                  "type": null
                },
                {
                  "name": "value",
                  "type": null
                }
              ],
              "returns": null
            }
          ],
          "actualName": "Tabs",
          "props": {
            "action": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "Callback fired when the component mounts.\nThis is useful when you want to trigger an action programmatically.\nIt currently only supports `updateIndicator()` action.\n\n@param {object} actions This object contains all possible actions\nthat can be triggered programmatically."
            },
            "centered": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the Tabss will be centered.\nThis property is intended for large views."
            },
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The content of the component."
            },
            "classes": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details."
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "@ignore"
            },
            "component": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "The component used for the root node.\nEither a string to use a DOM element or a component."
            },
            "fullWidth": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the Tabss will grow to use all the available space.\nThis property is intended for small views, like on mobile."
            },
            "indicatorColor": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "'secondary'",
                    "computed": false
                  },
                  {
                    "value": "'primary'",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "Determines the color of the indicator."
            },
            "onChange": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "Callback fired when the value changes.\n\n@param {object} event The event source of the callback\n@param {number} value We default to the index of the child"
            },
            "scrollable": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, it will invoke scrolling properties and allow for horizontally\nscrolling (or swiping) of the Tabs bar."
            },
            "ScrollButtonComponent": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The component used to render the scroll buttons."
            },
            "scrollButtons": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "'auto'",
                    "computed": false
                  },
                  {
                    "value": "'on'",
                    "computed": false
                  },
                  {
                    "value": "'off'",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "Determine behavior of scroll buttons when Tabss are set to scroll\n`auto` will only present them on medium and larger viewports\n`on` will always present them\n`off` will never present them"
            },
            "TabsIndicatorProps": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Properties applied to the `TabsIndicator` element."
            },
            "textColor": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "'secondary'",
                    "computed": false
                  },
                  {
                    "value": "'primary'",
                    "computed": false
                  },
                  {
                    "value": "'inherit'",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "Determines the color of the `Tabs`."
            },
            "theme": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "@ignore"
            },
            "value": {
              "type": {
                "name": "number"
              },
              "required": false,
              "description": "The value of the currently selected `Tabs`.\nIf you don't want any selected `Tabs`, you can set this property to `false`."
            },
            "defaultValue": {
              "type": {
                "name": "number"
              },
              "required": false,
              "description": "Number of the tab that supposed to be active initially. Starts with  0 for the first tab."
            },
            "variant": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "'standard'",
                    "computed": false
                  },
                  {
                    "value": "'scrollable'",
                    "computed": false
                  },
                  {
                    "value": "'fullWidth'",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "Determines additional display behavior of the Tabss:\n - `scrollable` will invoke scrolling properties and allow for horizontally\n scrolling (or swiping) of the Tabs bar.\n -`fullWidth` will make the Tabss grow to use all the available space,\n which should be used for small views, like on mobile.\n - `standard` will render the default state."
            }
          }
        }
      ]
    },
    {
      "key": "src/TableUXP/TableUXP.js",
      "value": [
        {
          "description": "",
          "displayName": "TableUXP",
          "methods": [
            {
              "name": "handleRequestSort",
              "docblock": null,
              "modifiers": [],
              "params": [
                {
                  "name": "event",
                  "type": null
                },
                {
                  "name": "property",
                  "type": null
                }
              ],
              "returns": null
            },
            {
              "name": "handleSelectAllClick",
              "docblock": null,
              "modifiers": [],
              "params": [
                {
                  "name": "event",
                  "type": null
                }
              ],
              "returns": null
            },
            {
              "name": "handleClick",
              "docblock": null,
              "modifiers": [],
              "params": [
                {
                  "name": "event",
                  "type": null
                },
                {
                  "name": "id",
                  "type": null
                }
              ],
              "returns": null
            },
            {
              "name": "handleChangePage",
              "docblock": null,
              "modifiers": [],
              "params": [
                {
                  "name": "event",
                  "type": null
                },
                {
                  "name": "page",
                  "type": null
                }
              ],
              "returns": null
            },
            {
              "name": "handleChangeRowsPerPage",
              "docblock": null,
              "modifiers": [],
              "params": [
                {
                  "name": "event",
                  "type": null
                }
              ],
              "returns": null
            },
            {
              "name": "isSelected",
              "docblock": null,
              "modifiers": [],
              "params": [
                {
                  "name": "id",
                  "type": null
                }
              ],
              "returns": null
            }
          ],
          "actualName": "TableUXP",
          "props": {
            "columns": {
              "type": {
                "name": "arrayOf",
                "value": {
                  "name": "string"
                }
              },
              "required": false,
              "description": "Values of columns.\nFormat:\n[\"First Name\", \"Last Name\", \"Address\"]"
            },
            "rows": {
              "type": {
                "name": "array"
              },
              "required": false,
              "description": "Values of rows in key:value pairs. Key must match column headers. \nMUST include a unique id.\nFormat:\n[\n {\n        \"id\": \"1\",\n        \"First Name\": \"John\",\n        \"Last Name\": \"Doe\",\n        \"Address\": \"123 Main Street\"\n      },\n      {\n        \"id\": \"3\",\n        \"First Name\": \"Jane\",\n        \"Last Name\": \"Doe\",\n        \"Address\": \"14865 Oak Road\"\n      },\n    ]"
            },
            "hasHeader": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "Show/Hide the action header"
            },
            "headerText": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "Title of table displaid in action header"
            },
            "hasSorting": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "Enable/disable column sorting"
            },
            "hasSelection": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "Enable/disable selection checkboxes"
            },
            "orderBy": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "Column name to be sorted by default"
            },
            "order": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "\"asc\"",
                    "computed": false
                  },
                  {
                    "value": "\"desc\"",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "Sorting order"
            },
            "hasPagination": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "Enable/disable pagination"
            },
            "page": {
              "type": {
                "name": "number"
              },
              "required": false,
              "description": "The initial page to be loaded"
            },
            "rowsPerPage": {
              "type": {
                "name": "number"
              },
              "required": false,
              "description": "How many records to display per page. Should match a rowsPerPage value."
            },
            "rowsPerPageOptions": {
              "type": {
                "name": "array"
              },
              "required": false,
              "description": "Options for \"Rows per page\" drop-down.\nFormat:\n[ 5, 10, 25 ]"
            },
            "elevation": {
              "type": {
                "name": "number"
              },
              "required": false,
              "description": "Elevation of table container."
            }
          }
        }
      ]
    },
    {
      "key": "src/TabsContainer/TabsContainer.js",
      "value": [
        {
          "description": "",
          "displayName": "TabsContainer",
          "methods": [
            {
              "name": "handleChange",
              "docblock": null,
              "modifiers": [],
              "params": [
                {
                  "name": "event",
                  "type": null
                },
                {
                  "name": "value",
                  "type": null
                }
              ],
              "returns": null
            },
            {
              "name": "renderContent",
              "docblock": null,
              "modifiers": [],
              "params": [],
              "returns": null
            }
          ],
          "actualName": "TabsContainer",
          "props": {
            "classes": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": ""
            },
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": ""
            },
            "containerColor": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "\"inherit\"",
                    "computed": false
                  },
                  {
                    "value": "\"primary\"",
                    "computed": false
                  },
                  {
                    "value": "\"secondary\"",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": ""
            },
            "containerStyle": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": ""
            },
            "tabs": {
              "type": {
                "name": "arrayOf",
                "value": {
                  "name": "shape",
                  "value": {
                    "label": {
                      "name": "string",
                      "required": false
                    },
                    "classes": {
                      "name": "string",
                      "required": false
                    },
                    "className": {
                      "name": "string",
                      "required": false
                    },
                    "disabled": {
                      "name": "bool",
                      "required": false
                    },
                    "fullWidth": {
                      "name": "bool",
                      "required": false
                    },
                    "selected": {
                      "name": "bool",
                      "required": false
                    },
                    "textColor": {
                      "name": "enum",
                      "value": [
                        {
                          "value": "\"primary\"",
                          "computed": false
                        },
                        {
                          "value": "\"secondary\"",
                          "computed": false
                        },
                        {
                          "value": "\"inherit\"",
                          "computed": false
                        }
                      ],
                      "required": false
                    }
                  }
                }
              },
              "required": false,
              "description": ""
            },
            "tabsCentered": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": ""
            },
            "tabsFullWidth": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": ""
            },
            "tabsScrollable": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": ""
            },
            "tabsTextColor": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "\"primary\"",
                    "computed": false
                  },
                  {
                    "value": "\"secondary\"",
                    "computed": false
                  },
                  {
                    "value": "\"inherit\"",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": ""
            },
            "tabsVariant": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "\"standard\"",
                    "computed": false
                  },
                  {
                    "value": "\"scrollable\"",
                    "computed": false
                  },
                  {
                    "value": "\"fullWidth\"",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": ""
            },
            "tabsValue": {
              "type": {
                "name": "number"
              },
              "required": false,
              "description": "",
              "defaultValue": {
                "value": "0",
                "computed": false
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/TextField/TextField.js",
      "value": [
        {
          "description": "",
          "displayName": "TextField",
          "methods": [],
          "actualName": "TextField",
          "props": {
            "autoComplete": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "This property helps users to fill forms faster, especially on mobile devices.\nThe name can be confusing, as it's more like an autofill.\nYou can learn more about it here:\nhttps://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill"
            },
            "autoFocus": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the input will be focused during the first mount."
            },
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": ""
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": ""
            },
            "defaultValue": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "number"
                  }
                ]
              },
              "required": false,
              "description": "The default value of the `Input` element."
            },
            "disabled": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the input will be disabled."
            },
            "error": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the label will be displayed in an error state."
            },
            "FormHelperTextProps": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": ""
            },
            "fullWidth": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the input will take up the full width of its container."
            },
            "helperText": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The helper text content."
            },
            "id": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "The id of the `input` element.\nUse that property to make `label` and `helperText` accessible for screen readers."
            },
            "InputLabelProps": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": ""
            },
            "InputProps": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Properties applied to the `Input` element."
            },
            "inputProps": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Attributes applied to the native `input` element."
            },
            "inputRef": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "func"
                  },
                  {
                    "name": "object"
                  }
                ]
              },
              "required": false,
              "description": "Use that property to pass a ref callback to the native input component."
            },
            "label": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The label content."
            },
            "margin": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "\"none\"",
                    "computed": false
                  },
                  {
                    "value": "\"dense\"",
                    "computed": false
                  },
                  {
                    "value": "\"normal\"",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "If `dense` or `normal`, will adjust vertical spacing of this and contained components."
            },
            "multiline": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, a textarea element will be rendered instead of an input."
            },
            "name": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "Name attribute of the `input` element."
            },
            "onBlur": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": ""
            },
            "onChange": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "Callback fired when the value is changed."
            },
            "onFocus": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": ""
            },
            "placeholder": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "The short hint displayed in the input before the user enters a value."
            },
            "required": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the label is displayed as required and the input will be required."
            },
            "rows": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "number"
                  }
                ]
              },
              "required": false,
              "description": "Number of rows to display when multiline option is set to true."
            },
            "rowsMax": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "number"
                  }
                ]
              },
              "required": false,
              "description": "Maximum number of rows to display when multiline option is set to true."
            },
            "select": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "Render a `Select` element while passing the `Input` element to `Select` as `input` parameter.\nIf this option is set you must pass the options of the select as children."
            },
            "SelectProps": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": ""
            },
            "type": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "Type attribute of the `Input` element. It should be a valid HTML5 input type."
            },
            "value": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "number"
                  },
                  {
                    "name": "bool"
                  },
                  {
                    "name": "arrayOf",
                    "value": {
                      "name": "union",
                      "value": [
                        {
                          "name": "string"
                        },
                        {
                          "name": "number"
                        },
                        {
                          "name": "bool"
                        }
                      ]
                    }
                  }
                ]
              },
              "required": false,
              "description": "The value of the `Input` element, required for a controlled component."
            },
            "variant": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "\"standard\"",
                    "computed": false
                  },
                  {
                    "value": "\"outlined\"",
                    "computed": false
                  },
                  {
                    "value": "\"filled\"",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "The variant to use."
            }
          }
        }
      ]
    },
    {
      "key": "src/ThemeTarget/ThemeTarget.js",
      "value": [
        {
          "description": "",
          "displayName": "ThemeTarget",
          "methods": [],
          "actualName": "ThemeTarget",
          "props": {
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "You can wrap a node."
            },
            "disableStylesGeneration": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "You can disable the generation of the styles with this option.\nIt can be useful when traversing the React tree outside of the HTML\nrendering step on the server.\nLet's say you are using react-apollo to extract all\nthe queries made by the interface server-side.\nYou can significantly speed up the traversal with this property."
            },
            "sheetsCache": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "@ignore\n\nIn beta."
            },
            "sheetsManager": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "The sheetsManager is used to deduplicate style sheet injection in the page.\nIt's deduplicating using the (theme, styles) couple.\nOn the server, you should provide a new instance for each request."
            },
            "theme": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "A theme object."
            }
          }
        }
      ]
    },
    {
      "key": "src/Toolbar/Toolbar.js",
      "value": [
        {
          "description": "",
          "displayName": "Toolbar",
          "methods": [],
          "actualName": "Toolbar",
          "props": {
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "Toolbar children, usually a mixture of `IconButton`, `Button` and `Typography`."
            },
            "classes": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details."
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "@ignore"
            },
            "disableGutters": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, disables gutter padding."
            },
            "variant": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "\"regular\"",
                    "computed": false
                  },
                  {
                    "value": "\"dense\"",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "The variant to use."
            },
            "justifyContent": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "\"center\"",
                    "computed": false
                  },
                  {
                    "value": "\"flex-end\"",
                    "computed": false
                  },
                  {
                    "value": "\"flex-start\"",
                    "computed": false
                  },
                  {
                    "value": "\"space-around\"",
                    "computed": false
                  },
                  {
                    "value": "\"space-between\"",
                    "computed": false
                  },
                  {
                    "value": "\"space-evenly\"",
                    "computed": false
                  },
                  {
                    "value": "\"stretch\"",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": ""
            }
          }
        }
      ]
    },
    {
      "key": "src/TooltipUXP/TooltipUXP.js",
      "value": [
        {
          "description": "",
          "displayName": "TooltipUXP",
          "methods": [],
          "actualName": "TooltipUXP",
          "props": {
            "title": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "Tooltip title. Zero-length titles string are never displayed."
            },
            "placement": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "\"bottom-end\"",
                    "computed": false
                  },
                  {
                    "value": "\"bottom-start\"",
                    "computed": false
                  },
                  {
                    "value": "\"bottom\"",
                    "computed": false
                  },
                  {
                    "value": "\"left-end\"",
                    "computed": false
                  },
                  {
                    "value": "\"left-start\"",
                    "computed": false
                  },
                  {
                    "value": "\"left\"",
                    "computed": false
                  },
                  {
                    "value": "\"right-end\"",
                    "computed": false
                  },
                  {
                    "value": "\"right-start\"",
                    "computed": false
                  },
                  {
                    "value": "\"right\"",
                    "computed": false
                  },
                  {
                    "value": "\"top-end\"",
                    "computed": false
                  },
                  {
                    "value": "\"top-start\"",
                    "computed": false
                  },
                  {
                    "value": "\"top\"",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "Tooltip placement."
            },
            "open": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the tooltip is shown."
            },
            "onClose": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "Callback fired when the tooltip requests to be closed.\n\n@param {object} event The event source of the callback"
            },
            "onOpen": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "Callback fired when the tooltip requests to be open.\n\n@param {object} event The event source of the callback"
            },
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "Tooltip reference element."
            }
          }
        }
      ]
    },
    {
      "key": "src/Typography/Typography.js",
      "value": [
        {
          "description": "",
          "displayName": "Typography",
          "methods": [],
          "actualName": "Typography",
          "props": {
            "align": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "\"inherit\"",
                    "computed": false
                  },
                  {
                    "value": "\"left\"",
                    "computed": false
                  },
                  {
                    "value": "\"center\"",
                    "computed": false
                  },
                  {
                    "value": "\"right\"",
                    "computed": false
                  },
                  {
                    "value": "\"justify\"",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "Set the text-align on the component."
            },
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "The content of the component."
            },
            "classes": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "Override or extend the styles applied to the component."
            },
            "color": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "\"default\"",
                    "computed": false
                  },
                  {
                    "value": "\"error\"",
                    "computed": false
                  },
                  {
                    "value": "\"inherit\"",
                    "computed": false
                  },
                  {
                    "value": "\"primary\"",
                    "computed": false
                  },
                  {
                    "value": "\"secondary\"",
                    "computed": false
                  },
                  {
                    "value": "\"textPrimary\"",
                    "computed": false
                  },
                  {
                    "value": "\"textSecondary\"",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "The color of the component. It supports those theme colors that make sense for this component."
            },
            "gutterBottom": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the text will have a bottom margin."
            },
            "headlineMapping": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "We are empirically mapping the variant property to a range of different DOM element types.\nFor instance, subtitle1 to `<h6>`.\nIf you wish to change that mapping, you can provide your own.\nAlternatively, you can use the `component` property.\nThe default mapping is the following:"
            },
            "inline": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "Controls whether the Typography is inline or not."
            },
            "noWrap": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the text will not wrap, but instead will truncate with an ellipsis."
            },
            "paragraph": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "If `true`, the text will have a bottom margin."
            },
            "variant": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "\"h1\"",
                    "computed": false
                  },
                  {
                    "value": "\"h2\"",
                    "computed": false
                  },
                  {
                    "value": "\"h3\"",
                    "computed": false
                  },
                  {
                    "value": "\"h4\"",
                    "computed": false
                  },
                  {
                    "value": "\"h5\"",
                    "computed": false
                  },
                  {
                    "value": "\"h6\"",
                    "computed": false
                  },
                  {
                    "value": "\"subtitle1\"",
                    "computed": false
                  },
                  {
                    "value": "\"subtitle2\"",
                    "computed": false
                  },
                  {
                    "value": "\"body1\"",
                    "computed": false
                  },
                  {
                    "value": "\"body2\"",
                    "computed": false
                  },
                  {
                    "value": "\"caption\"",
                    "computed": false
                  },
                  {
                    "value": "\"button\"",
                    "computed": false
                  },
                  {
                    "value": "\"overline\"",
                    "computed": false
                  },
                  {
                    "value": "\"srOnly\"",
                    "computed": false
                  },
                  {
                    "value": "\"inherit\"",
                    "computed": false
                  },
                  {
                    "value": "\"display4\"",
                    "computed": false
                  },
                  {
                    "value": "\"display3\"",
                    "computed": false
                  },
                  {
                    "value": "\"display2\"",
                    "computed": false
                  },
                  {
                    "value": "\"display1\"",
                    "computed": false
                  },
                  {
                    "value": "\"headline\"",
                    "computed": false
                  },
                  {
                    "value": "\"title\"",
                    "computed": false
                  },
                  {
                    "value": "\"subheading\"",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "Applies the theme typography styles.\nUse `body1` as the default value with the legacy implementation and `body2` with the new one."
            }
          }
        }
      ]
    },
    {
      "key": "src/Wrapper/UXPinWrapper.js",
      "value": [
        {
          "description": "",
          "displayName": "UXPinWrapper",
          "methods": [],
          "actualName": "UXPinWrapper"
        }
      ]
    },
    {
      "key": "src/paperbase/Content.js",
      "value": [
        {
          "description": "",
          "displayName": "Content",
          "methods": [],
          "actualName": "Content",
          "props": {
            "classes": {
              "type": {
                "name": "object"
              },
              "required": true,
              "description": ""
            }
          }
        }
      ]
    },
    {
      "key": "src/paperbase/Header.js",
      "value": [
        {
          "description": "",
          "displayName": "Header",
          "methods": [],
          "actualName": "Header",
          "props": {
            "classes": {
              "type": {
                "name": "object"
              },
              "required": true,
              "description": ""
            },
            "onDrawerToggle": {
              "type": {
                "name": "func"
              },
              "required": true,
              "description": ""
            }
          }
        }
      ]
    },
    {
      "key": "src/paperbase/Navigator.js",
      "value": [
        {
          "description": "",
          "displayName": "Navigator",
          "methods": [],
          "actualName": "Navigator",
          "props": {
            "classes": {
              "type": {
                "name": "object"
              },
              "required": true,
              "description": ""
            }
          }
        }
      ]
    },
    {
      "key": "src/IglooLayout/sections/Footer.js",
      "value": [
        {
          "description": "",
          "displayName": "Footer",
          "methods": [],
          "actualName": "Footer",
          "props": {
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "",
              "defaultValue": {
                "value": "''",
                "computed": false
              }
            },
            "classes": {
              "type": {
                "name": "shape",
                "value": {}
              },
              "required": true,
              "description": ""
            },
            "component": {
              "type": {
                "name": "elementType"
              },
              "required": false,
              "description": "",
              "defaultValue": {
                "value": "'footer'",
                "computed": false
              }
            },
            "style": {
              "type": {
                "name": "shape",
                "value": {}
              },
              "required": false,
              "description": "",
              "defaultValue": {
                "value": "{}",
                "computed": false
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/IglooLayout/sections/Content.js",
      "value": [
        {
          "description": "",
          "displayName": "Content",
          "methods": [],
          "actualName": "Content",
          "props": {
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "",
              "defaultValue": {
                "value": "''",
                "computed": false
              }
            },
            "classes": {
              "type": {
                "name": "shape",
                "value": {}
              },
              "required": true,
              "description": ""
            },
            "component": {
              "type": {
                "name": "elementType"
              },
              "required": false,
              "description": "",
              "defaultValue": {
                "value": "'main'",
                "computed": false
              }
            },
            "style": {
              "type": {
                "name": "shape",
                "value": {}
              },
              "required": false,
              "description": "",
              "defaultValue": {
                "value": "{}",
                "computed": false
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/IglooLayout/sections/Header.js",
      "value": [
        {
          "description": "",
          "displayName": "Header",
          "methods": [],
          "actualName": "Header",
          "props": {
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "",
              "defaultValue": {
                "value": "''",
                "computed": false
              }
            },
            "classes": {
              "type": {
                "name": "shape",
                "value": {}
              },
              "required": true,
              "description": ""
            },
            "component": {
              "type": {
                "name": "elementType"
              },
              "required": false,
              "description": "",
              "defaultValue": {
                "value": "'div'",
                "computed": false
              }
            },
            "style": {
              "type": {
                "name": "shape",
                "value": {}
              },
              "required": false,
              "description": "",
              "defaultValue": {
                "value": "{}",
                "computed": false
              }
            },
            "position": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "",
              "defaultValue": {
                "value": "'relative'",
                "computed": false
              }
            },
            "theme": {
              "type": {
                "name": "shape",
                "value": {}
              },
              "required": true,
              "description": ""
            },
            "children": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "func"
                  },
                  {
                    "name": "node"
                  }
                ]
              },
              "required": true,
              "description": ""
            },
            "toolbarProps": {
              "type": {
                "name": "shape",
                "value": {}
              },
              "required": false,
              "description": "",
              "defaultValue": {
                "value": "{}",
                "computed": false
              }
            },
            "menuIcon": {
              "type": {
                "name": "shape",
                "value": {
                  "inactive": {
                    "name": "node",
                    "required": true
                  },
                  "active": {
                    "name": "node",
                    "required": false
                  }
                }
              },
              "required": false,
              "description": "",
              "defaultValue": {
                "value": "null",
                "computed": false
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/IglooLayout/sections/Nav.js",
      "value": [
        {
          "description": "",
          "displayName": "Nav",
          "methods": [],
          "actualName": "Nav",
          "props": {
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "",
              "defaultValue": {
                "value": "''",
                "computed": false
              }
            },
            "classes": {
              "type": {
                "name": "shape",
                "value": {}
              },
              "required": true,
              "description": ""
            },
            "component": {
              "type": {
                "name": "elementType"
              },
              "required": false,
              "description": "",
              "defaultValue": {
                "value": "'div'",
                "computed": false
              }
            },
            "children": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "node"
                  },
                  {
                    "name": "func"
                  }
                ]
              },
              "required": true,
              "description": ""
            },
            "header": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "node"
                  },
                  {
                    "name": "func"
                  }
                ]
              },
              "required": false,
              "description": "",
              "defaultValue": {
                "value": "null",
                "computed": false
              }
            },
            "collapsedIcon": {
              "type": {
                "name": "shape",
                "value": {
                  "inactive": {
                    "name": "node",
                    "required": true
                  },
                  "active": {
                    "name": "node",
                    "required": false
                  }
                }
              },
              "required": false,
              "description": "",
              "defaultValue": {
                "value": "null",
                "computed": false
              }
            }
          }
        }
      ]
    },
    {
      "key": "src/IglooLayout/sections/Root.js",
      "value": [
        {
          "description": "",
          "displayName": "Root",
          "methods": [],
          "actualName": "Root",
          "props": {
            "classes": {
              "type": {
                "name": "shape",
                "value": {}
              },
              "required": true,
              "description": ""
            },
            "width": {
              "type": {
                "name": "string"
              },
              "required": true,
              "description": ""
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "",
              "defaultValue": {
                "value": "''",
                "computed": false
              }
            },
            "component": {
              "type": {
                "name": "elementType"
              },
              "required": false,
              "description": "",
              "defaultValue": {
                "value": "'div'",
                "computed": false
              }
            },
            "config": {
              "type": {
                "name": "shape",
                "value": {
                  "clipped": {
                    "name": "union",
                    "value": [
                      {
                        "name": "bool"
                      },
                      {
                        "name": "custom",
                        "raw": "createScreenPropTypes(PropTypes.bool)"
                      }
                    ],
                    "required": false
                  },
                  "collapsible": {
                    "name": "union",
                    "value": [
                      {
                        "name": "bool"
                      },
                      {
                        "name": "custom",
                        "raw": "createScreenPropTypes(PropTypes.bool)"
                      }
                    ],
                    "required": false
                  },
                  "collapsedWidth": {
                    "name": "union",
                    "value": [
                      {
                        "name": "number"
                      },
                      {
                        "name": "custom",
                        "raw": "createScreenPropTypes(PropTypes.number)"
                      }
                    ],
                    "required": false
                  },
                  "collapsed": {
                    "name": "bool",
                    "required": false
                  },
                  "navVariant": {
                    "name": "union",
                    "value": [
                      {
                        "name": "enum",
                        "value": [
                          {
                            "value": "'permanent'",
                            "computed": false
                          },
                          {
                            "value": "'persistent'",
                            "computed": false
                          },
                          {
                            "value": "'temporary'",
                            "computed": false
                          }
                        ]
                      },
                      {
                        "name": "custom",
                        "raw": "createScreenPropTypes(\n  PropTypes.oneOf(['permanent', 'persistent', 'temporary']),\n)"
                      }
                    ],
                    "required": false
                  },
                  "navWidth": {
                    "name": "union",
                    "value": [
                      {
                        "name": "number"
                      },
                      {
                        "name": "custom",
                        "raw": "createScreenPropTypes(PropTypes.number)"
                      }
                    ],
                    "required": false
                  },
                  "navAnchor": {
                    "name": "union",
                    "value": [
                      {
                        "name": "enum",
                        "value": [
                          {
                            "value": "'left'",
                            "computed": false
                          },
                          {
                            "value": "'bottom'",
                            "computed": false
                          }
                        ]
                      },
                      {
                        "name": "custom",
                        "raw": "createScreenPropTypes(PropTypes.oneOf(['left', 'bottom']))"
                      }
                    ],
                    "required": false
                  },
                  "headerPosition": {
                    "name": "union",
                    "value": [
                      {
                        "name": "enum",
                        "value": [
                          {
                            "value": "'static'",
                            "computed": false
                          },
                          {
                            "value": "'relative'",
                            "computed": false
                          },
                          {
                            "value": "'sticky'",
                            "computed": false
                          },
                          {
                            "value": "'fixed'",
                            "computed": false
                          },
                          {
                            "value": "'absolute'",
                            "computed": false
                          }
                        ]
                      },
                      {
                        "name": "custom",
                        "raw": "createScreenPropTypes(\n  PropTypes.oneOf(['static', 'relative', 'sticky', 'fixed', 'absolute']),\n)"
                      }
                    ],
                    "required": false
                  },
                  "squeezed": {
                    "name": "union",
                    "value": [
                      {
                        "name": "bool"
                      },
                      {
                        "name": "custom",
                        "raw": "createScreenPropTypes(PropTypes.bool)"
                      }
                    ],
                    "required": false
                  },
                  "footerShrink": {
                    "name": "union",
                    "value": [
                      {
                        "name": "bool"
                      },
                      {
                        "name": "custom",
                        "raw": "createScreenPropTypes(PropTypes.bool)"
                      }
                    ],
                    "required": false
                  }
                }
              },
              "required": false,
              "description": "",
              "defaultValue": {
                "value": "presets.createDefaultLayout()",
                "computed": true
              }
            },
            "children": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "node"
                  },
                  {
                    "name": "func"
                  }
                ]
              },
              "required": true,
              "description": ""
            }
          }
        }
      ]
    },
    {
      "key": "src/TabsContainer/TabContent/TabContent.js",
      "value": [
        {
          "description": "",
          "displayName": "TabContent",
          "methods": [],
          "actualName": "TabContent",
          "props": {
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": ""
            },
            "style": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": ""
            }
          }
        }
      ]
    },
    {
      "key": "src/Main/components/Footer/Footer.js",
      "value": [
        {
          "description": "",
          "displayName": "Footer",
          "methods": [],
          "actualName": "Footer",
          "props": {
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": ""
            }
          }
        }
      ]
    },
    {
      "key": "src/Main/components/Sidebar/Sidebar.js",
      "value": [
        {
          "description": "",
          "displayName": "Sidebar",
          "methods": [],
          "actualName": "Sidebar",
          "props": {
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": ""
            },
            "onClose": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": ""
            },
            "open": {
              "type": {
                "name": "bool"
              },
              "required": true,
              "description": ""
            },
            "variant": {
              "type": {
                "name": "string"
              },
              "required": true,
              "description": ""
            }
          }
        }
      ]
    },
    {
      "key": "src/Main/components/Topbar/Topbar.js",
      "value": [
        {
          "description": "",
          "displayName": "Topbar",
          "methods": [],
          "actualName": "Topbar",
          "props": {
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": ""
            },
            "onSidebarOpen": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": ""
            }
          }
        }
      ]
    },
    {
      "key": "src/Main/components/Sidebar/components/Profile/Profile.js",
      "value": [
        {
          "description": "",
          "displayName": "Profile",
          "methods": [],
          "actualName": "Profile",
          "props": {
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": ""
            }
          }
        }
      ]
    },
    {
      "key": "src/Main/components/Sidebar/components/SidebarNav/SidebarNav.js",
      "value": [
        {
          "description": "",
          "displayName": "SidebarNav",
          "methods": [],
          "actualName": "SidebarNav",
          "props": {
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": ""
            },
            "pages": {
              "type": {
                "name": "array"
              },
              "required": true,
              "description": ""
            }
          }
        }
      ]
    },
    {
      "key": "src/Main/components/Sidebar/components/UpgradePlan/UpgradePlan.js",
      "value": [
        {
          "description": "",
          "displayName": "UpgradePlan",
          "methods": [],
          "actualName": "UpgradePlan",
          "props": {
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": ""
            }
          }
        }
      ]
    },
    {
      "key": "src/paperbase/Paperbase.js",
      "value": [
        {
          "description": "",
          "displayName": "Paperbase",
          "methods": [],
          "actualName": "Paperbase",
          "props": {
            "classes": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": ""
            }
          }
        }
      ]
    }
  ],
  "entries": [
    {
      "key": "src/ButtonStyled/ButtonStyled.mdx",
      "value": {
        "name": "ButtonStyled",
        "id": "4bc9907d9b3cd6e849f0aaadabaf1f2c",
        "filepath": "src/ButtonStyled/ButtonStyled.mdx",
        "link": "",
        "slug": "src-button-styled-button-styled",
        "route": "/src-button-styled-button-styled",
        "menu": "",
        "headings": [
          {
            "slug": "hello-world",
            "depth": 1,
            "value": "Hello world"
          }
        ]
      }
    },
    {
      "key": "src/DemoFrame/DemoFrame.mdx",
      "value": {
        "name": "Button",
        "id": "60fefe7aca63a8c3829293d81d097c93",
        "filepath": "src/DemoFrame/DemoFrame.mdx",
        "link": "",
        "slug": "src-demo-frame-demo-frame",
        "route": "/src-demo-frame-demo-frame",
        "menu": "",
        "headings": [
          {
            "slug": "button",
            "depth": 1,
            "value": "Button"
          },
          {
            "slug": "basic-usage",
            "depth": 2,
            "value": "Basic usage"
          }
        ]
      }
    },
    {
      "key": "src/DemoSandboxed/IFrame.mdx",
      "value": {
        "name": "Iframe",
        "id": "132772d23623d1a0504fb307e0697390",
        "filepath": "src/DemoSandboxed/IFrame.mdx",
        "link": "",
        "slug": "src-demo-sandboxed-i-frame",
        "route": "/src-demo-sandboxed-i-frame",
        "menu": "",
        "headings": []
      }
    },
    {
      "key": "src/IglooAppbar/IglooAppbar.mdx",
      "value": {
        "name": "IglooAppBar",
        "id": "7d56a36b923edb741e009eee4cb9c90e",
        "filepath": "src/IglooAppbar/IglooAppbar.mdx",
        "link": "",
        "slug": "src-igloo-appbar-igloo-appbar",
        "route": "/src-igloo-appbar-igloo-appbar",
        "menu": "",
        "headings": [
          {
            "slug": "hello-world",
            "depth": 1,
            "value": "Hello world"
          }
        ]
      }
    },
    {
      "key": "src/IglooHeader/IglooHeader.mdx",
      "value": {
        "name": "IglooHeader",
        "id": "af2d684f2ea9ef3947a7f7bb32a24023",
        "filepath": "src/IglooHeader/IglooHeader.mdx",
        "link": "",
        "slug": "src-igloo-header-igloo-header",
        "route": "/src-igloo-header-igloo-header",
        "menu": "",
        "headings": [
          {
            "slug": "hello-world",
            "depth": 1,
            "value": "Hello world"
          }
        ]
      }
    },
    {
      "key": "src/IglooSideNavigation/IglooSideNavigation.mdx",
      "value": {
        "name": "IglooSideNavigation",
        "id": "bd532a2156bd8adedfc42d133ab519a8",
        "filepath": "src/IglooSideNavigation/IglooSideNavigation.mdx",
        "link": "",
        "slug": "src-igloo-side-navigation-igloo-side-navigation",
        "route": "/src-igloo-side-navigation-igloo-side-navigation",
        "menu": "",
        "headings": [
          {
            "slug": "hello-world",
            "depth": 1,
            "value": "Hello world"
          }
        ]
      }
    }
  ]
}
